
obj/STM32F4_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004414  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  0800459c  0800459c  0000c59c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080045a4  080045a4  0000c5a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000458  20000000  080045a8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00012dfc  20000458  08004a00  00010458  2**2
                  ALLOC
  6 ._user_heap_stack 00000400  20013254  080177fc  00010458  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00010458  2**0
                  CONTENTS, READONLY
  8 .debug_info   00007bca  00000000  00000000  00010486  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001a02  00000000  00000000  00018050  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000033c2  00000000  00000000  00019a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000958  00000000  00000000  0001ce14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000848  00000000  00000000  0001d76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004376  00000000  00000000  0001dfb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003438  00000000  00000000  0002232a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  00025762  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000201c  00000000  00000000  000257d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000458 	.word	0x20000458
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004584 	.word	0x08004584

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <frame_dummy+0x1c>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4806      	ldr	r0, [pc, #24]	; (80001cc <frame_dummy+0x20>)
 80001b4:	4906      	ldr	r1, [pc, #24]	; (80001d0 <frame_dummy+0x24>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4806      	ldr	r0, [pc, #24]	; (80001d4 <frame_dummy+0x28>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b113      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <frame_dummy+0x2c>)
 80001c2:	b103      	cbz	r3, 80001c6 <frame_dummy+0x1a>
 80001c4:	4798      	blx	r3
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004584 	.word	0x08004584
 80001d0:	2000045c 	.word	0x2000045c
 80001d4:	20000458 	.word	0x20000458
 80001d8:	00000000 	.word	0x00000000

080001dc <memcpy>:
 80001dc:	4684      	mov	ip, r0
 80001de:	ea41 0300 	orr.w	r3, r1, r0
 80001e2:	f013 0303 	ands.w	r3, r3, #3
 80001e6:	d16d      	bne.n	80002c4 <memcpy+0xe8>
 80001e8:	3a40      	subs	r2, #64	; 0x40
 80001ea:	d341      	bcc.n	8000270 <memcpy+0x94>
 80001ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f0:	f840 3b04 	str.w	r3, [r0], #4
 80001f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f8:	f840 3b04 	str.w	r3, [r0], #4
 80001fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000200:	f840 3b04 	str.w	r3, [r0], #4
 8000204:	f851 3b04 	ldr.w	r3, [r1], #4
 8000208:	f840 3b04 	str.w	r3, [r0], #4
 800020c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000210:	f840 3b04 	str.w	r3, [r0], #4
 8000214:	f851 3b04 	ldr.w	r3, [r1], #4
 8000218:	f840 3b04 	str.w	r3, [r0], #4
 800021c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000220:	f840 3b04 	str.w	r3, [r0], #4
 8000224:	f851 3b04 	ldr.w	r3, [r1], #4
 8000228:	f840 3b04 	str.w	r3, [r0], #4
 800022c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000230:	f840 3b04 	str.w	r3, [r0], #4
 8000234:	f851 3b04 	ldr.w	r3, [r1], #4
 8000238:	f840 3b04 	str.w	r3, [r0], #4
 800023c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000240:	f840 3b04 	str.w	r3, [r0], #4
 8000244:	f851 3b04 	ldr.w	r3, [r1], #4
 8000248:	f840 3b04 	str.w	r3, [r0], #4
 800024c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000250:	f840 3b04 	str.w	r3, [r0], #4
 8000254:	f851 3b04 	ldr.w	r3, [r1], #4
 8000258:	f840 3b04 	str.w	r3, [r0], #4
 800025c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000260:	f840 3b04 	str.w	r3, [r0], #4
 8000264:	f851 3b04 	ldr.w	r3, [r1], #4
 8000268:	f840 3b04 	str.w	r3, [r0], #4
 800026c:	3a40      	subs	r2, #64	; 0x40
 800026e:	d2bd      	bcs.n	80001ec <memcpy+0x10>
 8000270:	3230      	adds	r2, #48	; 0x30
 8000272:	d311      	bcc.n	8000298 <memcpy+0xbc>
 8000274:	f851 3b04 	ldr.w	r3, [r1], #4
 8000278:	f840 3b04 	str.w	r3, [r0], #4
 800027c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000280:	f840 3b04 	str.w	r3, [r0], #4
 8000284:	f851 3b04 	ldr.w	r3, [r1], #4
 8000288:	f840 3b04 	str.w	r3, [r0], #4
 800028c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000290:	f840 3b04 	str.w	r3, [r0], #4
 8000294:	3a10      	subs	r2, #16
 8000296:	d2ed      	bcs.n	8000274 <memcpy+0x98>
 8000298:	320c      	adds	r2, #12
 800029a:	d305      	bcc.n	80002a8 <memcpy+0xcc>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	3a04      	subs	r2, #4
 80002a6:	d2f9      	bcs.n	800029c <memcpy+0xc0>
 80002a8:	3204      	adds	r2, #4
 80002aa:	d008      	beq.n	80002be <memcpy+0xe2>
 80002ac:	07d2      	lsls	r2, r2, #31
 80002ae:	bf1c      	itt	ne
 80002b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80002b8:	d301      	bcc.n	80002be <memcpy+0xe2>
 80002ba:	880b      	ldrh	r3, [r1, #0]
 80002bc:	8003      	strh	r3, [r0, #0]
 80002be:	4660      	mov	r0, ip
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	2a08      	cmp	r2, #8
 80002c6:	d313      	bcc.n	80002f0 <memcpy+0x114>
 80002c8:	078b      	lsls	r3, r1, #30
 80002ca:	d08d      	beq.n	80001e8 <memcpy+0xc>
 80002cc:	f010 0303 	ands.w	r3, r0, #3
 80002d0:	d08a      	beq.n	80001e8 <memcpy+0xc>
 80002d2:	f1c3 0304 	rsb	r3, r3, #4
 80002d6:	1ad2      	subs	r2, r2, r3
 80002d8:	07db      	lsls	r3, r3, #31
 80002da:	bf1c      	itt	ne
 80002dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002e0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002e4:	d380      	bcc.n	80001e8 <memcpy+0xc>
 80002e6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002ea:	f820 3b02 	strh.w	r3, [r0], #2
 80002ee:	e77b      	b.n	80001e8 <memcpy+0xc>
 80002f0:	3a04      	subs	r2, #4
 80002f2:	d3d9      	bcc.n	80002a8 <memcpy+0xcc>
 80002f4:	3a01      	subs	r2, #1
 80002f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002fa:	f800 3b01 	strb.w	r3, [r0], #1
 80002fe:	d2f9      	bcs.n	80002f4 <memcpy+0x118>
 8000300:	780b      	ldrb	r3, [r1, #0]
 8000302:	7003      	strb	r3, [r0, #0]
 8000304:	784b      	ldrb	r3, [r1, #1]
 8000306:	7043      	strb	r3, [r0, #1]
 8000308:	788b      	ldrb	r3, [r1, #2]
 800030a:	7083      	strb	r3, [r0, #2]
 800030c:	4660      	mov	r0, ip
 800030e:	4770      	bx	lr

08000310 <init_USART1>:
 * 
 * Arguments: baudrate --> the baudrate at which the USART is 
 * 						   supposed to operate
 */
void init_USART1(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
	
	/* enable APB2 peripheral clock for USART1 
	 * note that only USART1 and USART6 are connected to APB2
	 * the other USARTs are connected to APB1
	 */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000316:	2010      	movs	r0, #16
 8000318:	2101      	movs	r1, #1
 800031a:	f003 fa43 	bl	80037a4 <RCC_APB2PeriphClockCmd>
	
	/* enable the peripheral clock for the pins used by 
	 * USART1, PB6 for TX and PB7 for RX
	 */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800031e:	2002      	movs	r0, #2
 8000320:	2101      	movs	r1, #1
 8000322:	f003 fa07 	bl	8003734 <RCC_AHB1PeriphClockCmd>
	
	/* This sequence sets up the TX and RX pins 
	 * so they work correctly with the USART1 peripheral
	 */
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // Pins 6 (TX) and 7 (RX) are used
 8000326:	23c0      	movs	r3, #192	; 0xc0
 8000328:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			// the pins are configured as alternate function so the USART peripheral has access to them
 800032a:	2302      	movs	r3, #2
 800032c:	773b      	strb	r3, [r7, #28]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		// this defines the IO speed and has nothing to do with the baudrate!
 800032e:	2302      	movs	r3, #2
 8000330:	777b      	strb	r3, [r7, #29]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;			// this defines the output type as push pull mode (as opposed to open drain)
 8000332:	2300      	movs	r3, #0
 8000334:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			// this activates the pullup resistors on the IO pins
 8000336:	2301      	movs	r3, #1
 8000338:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOB, &GPIO_InitStruct);					// now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	481d      	ldr	r0, [pc, #116]	; (80003b4 <init_USART1+0xa4>)
 8000340:	4619      	mov	r1, r3
 8000342:	f002 ff0f 	bl	8003164 <GPIO_Init>
	
	/* The RX and TX pins are now connected to their AF
	 * so that the USART1 can take over control of the 
	 * pins
	 */
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1); //
 8000346:	481b      	ldr	r0, [pc, #108]	; (80003b4 <init_USART1+0xa4>)
 8000348:	2106      	movs	r1, #6
 800034a:	2207      	movs	r2, #7
 800034c:	f003 f820 	bl	8003390 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8000350:	4818      	ldr	r0, [pc, #96]	; (80003b4 <init_USART1+0xa4>)
 8000352:	2107      	movs	r1, #7
 8000354:	2207      	movs	r2, #7
 8000356:	f003 f81b 	bl	8003390 <GPIO_PinAFConfig>
	
	/* Now the USART_InitStruct is used to define the 
	 * properties of USART1 
	 */
	USART_InitStruct.USART_BaudRate = 38400;				// the baudrate is set to the value we passed into this init function
 800035a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800035e:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000360:	2300      	movs	r3, #0
 8000362:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;		// we want 1 stop bit (standard)
 8000364:	2300      	movs	r3, #0
 8000366:	81fb      	strh	r3, [r7, #14]
	USART_InitStruct.USART_Parity = USART_Parity_No;		// we don't want a parity bit (standard)
 8000368:	2300      	movs	r3, #0
 800036a:	823b      	strh	r3, [r7, #16]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 800036c:	2300      	movs	r3, #0
 800036e:	82bb      	strh	r3, [r7, #20]
	USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000370:	230c      	movs	r3, #12
 8000372:	827b      	strh	r3, [r7, #18]
	USART_Init(USART1, &USART_InitStruct);					// again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000374:	f107 0308 	add.w	r3, r7, #8
 8000378:	480f      	ldr	r0, [pc, #60]	; (80003b8 <init_USART1+0xa8>)
 800037a:	4619      	mov	r1, r3
 800037c:	f003 fa4a 	bl	8003814 <USART_Init>
	/* Here the USART1 receive interrupt is enabled
	 * and the interrupt controller is configured 
	 * to jump to the USART1_IRQHandler() function
	 * if the USART1 receive interrupt occurs
	 */
	USART_ITConfig(USARTx, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt 
 8000380:	480d      	ldr	r0, [pc, #52]	; (80003b8 <init_USART1+0xa8>)
 8000382:	f240 5125 	movw	r1, #1317	; 0x525
 8000386:	2201      	movs	r2, #1
 8000388:	f003 fc42 	bl	8003c10 <USART_ITConfig>
	
	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		 // we want to configure the USART1 interrupts
 800038c:	2325      	movs	r3, #37	; 0x25
 800038e:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;// this sets the priority group of the USART1 interrupts
 8000390:	2300      	movs	r3, #0
 8000392:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		 // this sets the subpriority inside the group
 8000394:	2300      	movs	r3, #0
 8000396:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			 // the USART1 interrupts are globally enabled
 8000398:	2301      	movs	r3, #1
 800039a:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);	 // the properties are passed to the NVIC_Init function which takes care of the low level stuff	
 800039c:	1d3b      	adds	r3, r7, #4
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 fe4a 	bl	8003038 <NVIC_Init>

	// finally this enables the complete USART1 peripheral
	USART_Cmd(USART1, ENABLE);
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <init_USART1+0xa8>)
 80003a6:	2101      	movs	r1, #1
 80003a8:	f003 fb9a 	bl	8003ae0 <USART_Cmd>
}
 80003ac:	3720      	adds	r7, #32
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40020400 	.word	0x40020400
 80003b8:	40011000 	.word	0x40011000

080003bc <USART_puts>:
 * 
 * Note 2: At the moment it takes a volatile char because the received_string variable
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(uint8_t *s)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]

	while(*s){
 80003c4:	e010      	b.n	80003e8 <USART_puts+0x2c>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) ); 
 80003c6:	bf00      	nop
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <USART_puts+0x3c>)
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0f8      	beq.n	80003c8 <USART_puts+0xc>
		USART_SendData(USARTx, *s);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	4807      	ldr	r0, [pc, #28]	; (80003f8 <USART_puts+0x3c>)
 80003dc:	4619      	mov	r1, r3
 80003de:	f003 fbd3 	bl	8003b88 <USART_SendData>
		*s++;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	3301      	adds	r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 * 		   declared as volatile char --> otherwise the compiler will spit out warnings
 * */
void USART_puts(uint8_t *s)
{

	while(*s){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d1ea      	bne.n	80003c6 <USART_puts+0xa>
		// wait until data register is empty
		while( !(USARTx->SR & 0x00000040) ); 
		USART_SendData(USARTx, *s);
		*s++;
	}
}
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40011000 	.word	0x40011000

080003fc <USART1_IRQHandler>:

// this is the interrupt request handler (IRQ) for ALL USART1 interrupts
void USART1_IRQHandler(void){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
	
	// check if the USART1 receive interrupt flag was set
	if( USART_GetITStatus(USART1, USART_IT_RXNE) ){
 8000402:	4813      	ldr	r0, [pc, #76]	; (8000450 <USART1_IRQHandler+0x54>)
 8000404:	f240 5125 	movw	r1, #1317	; 0x525
 8000408:	f003 fcc0 	bl	8003d8c <USART_GetITStatus>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d01b      	beq.n	800044a <USART1_IRQHandler+0x4e>
		
		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART1->DR; // the character from the USART1 data register is saved in t
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <USART1_IRQHandler+0x54>)
 8000414:	889b      	ldrh	r3, [r3, #4]
 8000416:	b29b      	uxth	r3, r3
 8000418:	71fb      	strb	r3, [r7, #7]
		
		/* check if the received character is not the LF character (used to determine end of string) 
		 * or the if the maximum string length has been been reached 
		 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){ 
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	2b0a      	cmp	r3, #10
 800041e:	d011      	beq.n	8000444 <USART1_IRQHandler+0x48>
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <USART1_IRQHandler+0x58>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	b25b      	sxtb	r3, r3
 8000428:	2b00      	cmp	r3, #0
 800042a:	db0b      	blt.n	8000444 <USART1_IRQHandler+0x48>
			received_string[cnt] = t;
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <USART1_IRQHandler+0x58>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4a09      	ldr	r2, [pc, #36]	; (8000458 <USART1_IRQHandler+0x5c>)
 8000432:	79f9      	ldrb	r1, [r7, #7]
 8000434:	54d1      	strb	r1, [r2, r3]
			cnt++;
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <USART1_IRQHandler+0x58>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	3301      	adds	r3, #1
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4b05      	ldr	r3, [pc, #20]	; (8000454 <USART1_IRQHandler+0x58>)
 8000440:	701a      	strb	r2, [r3, #0]
 8000442:	e002      	b.n	800044a <USART1_IRQHandler+0x4e>
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <USART1_IRQHandler+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
			//USART_puts(USART1, received_string);
		}
	}
}
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40011000 	.word	0x40011000
 8000454:	20000474 	.word	0x20000474
 8000458:	200131d0 	.word	0x200131d0

0800045c <crc16>:



/* function for  */
uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	807b      	strh	r3, [r7, #2]
     uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000468:	23ff      	movs	r3, #255	; 0xff
 800046a:	73fb      	strb	r3, [r7, #15]
     uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 800046c:	23ff      	movs	r3, #255	; 0xff
 800046e:	73bb      	strb	r3, [r7, #14]
     unsigned int i; /* will index into CRC lookup */
 
     /* pass through message buffer */
     while (buffer_length--) {
 8000470:	e013      	b.n	800049a <crc16+0x3e>
         i = crc_hi ^ *buffer++; /* calculate the CRC  */
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	1c5a      	adds	r2, r3, #1
 8000476:	607a      	str	r2, [r7, #4]
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	4053      	eors	r3, r2
 800047e:	b2db      	uxtb	r3, r3
 8000480:	60bb      	str	r3, [r7, #8]
         crc_hi = crc_lo ^ table_crc_hi[i];
 8000482:	4a0f      	ldr	r2, [pc, #60]	; (80004c0 <crc16+0x64>)
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	4413      	add	r3, r2
 8000488:	781a      	ldrb	r2, [r3, #0]
 800048a:	7bbb      	ldrb	r3, [r7, #14]
 800048c:	4053      	eors	r3, r2
 800048e:	73fb      	strb	r3, [r7, #15]
         crc_lo = table_crc_lo[i];
 8000490:	4a0c      	ldr	r2, [pc, #48]	; (80004c4 <crc16+0x68>)
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	4413      	add	r3, r2
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	73bb      	strb	r3, [r7, #14]
     uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
     uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
     unsigned int i; /* will index into CRC lookup */
 
     /* pass through message buffer */
     while (buffer_length--) {
 800049a:	887b      	ldrh	r3, [r7, #2]
 800049c:	1e5a      	subs	r2, r3, #1
 800049e:	807a      	strh	r2, [r7, #2]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d1e6      	bne.n	8000472 <crc16+0x16>
         i = crc_hi ^ *buffer++; /* calculate the CRC  */
         crc_hi = crc_lo ^ table_crc_hi[i];
         crc_lo = table_crc_lo[i];
     }
 
     return (crc_hi << 8 | crc_lo);
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	021b      	lsls	r3, r3, #8
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	7bbb      	ldrb	r3, [r7, #14]
 80004ac:	b29b      	uxth	r3, r3
 80004ae:	4313      	orrs	r3, r2
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	b29b      	uxth	r3, r3
}
 80004b4:	4618      	mov	r0, r3
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	0800434c 	.word	0x0800434c
 80004c4:	0800444c 	.word	0x0800444c

080004c8 <write_modbus>:


/* write to modbus */
int write_modbus( uint8_t * req, int nb)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
	int i; 

	
	USART_puts(req);
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f7ff ff72 	bl	80003bc <USART_puts>
	
	
//	for (i = 0; i < nb; i++) printf("{%.2X}", req[i]);
//	printf("\n");
	return nb;
 80004d8:	683b      	ldr	r3, [r7, #0]
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop

080004e4 <read_modbus>:

/* read from modbus line (RS485) */
int read_modbus( uint8_t * req, int nb)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	int i ;	
	for (i = 0; i < nb; i++) 
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	e00b      	b.n	800050c <read_modbus+0x28>
		req[i] = received_string[i]; 
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	490a      	ldr	r1, [pc, #40]	; (8000524 <read_modbus+0x40>)
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	440a      	add	r2, r1
 8000500:	7812      	ldrb	r2, [r2, #0]
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	701a      	strb	r2, [r3, #0]

/* read from modbus line (RS485) */
int read_modbus( uint8_t * req, int nb)
{
	int i ;	
	for (i = 0; i < nb; i++) 
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	3301      	adds	r3, #1
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	429a      	cmp	r2, r3
 8000512:	dbef      	blt.n	80004f4 <read_modbus+0x10>
		req[i] = received_string[i]; 
//		printf("[%.2X]", req[i]);
//	printf("\n"); 
	return nb; 	
 8000514:	683b      	ldr	r3, [r7, #0]
}
 8000516:	4618      	mov	r0, r3
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200131d0 	.word	0x200131d0

08000528 <modbus_RIB>:

/* modbus read input bits */
int modbus_RIB( int16_t address, int nb, uint8_t *dst )
{
 8000528:	b580      	push	{r7, lr}
 800052a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800052e:	af00      	add	r7, sp, #0
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	6019      	str	r1, [r3, #0]
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	f107 030e 	add.w	r3, r7, #14
 800053e:	4602      	mov	r2, r0
 8000540:	801a      	strh	r2, [r3, #0]
	/* first send request */

	uint8_t req[REQ_MAX_LEN];
	int req_length; 
	
	req[0] = 0x36; 
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2236      	movs	r2, #54	; 0x36
 8000548:	701a      	strb	r2, [r3, #0]
	req[1] = 0x2;
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2202      	movs	r2, #2
 8000550:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8000552:	f107 030e 	add.w	r3, r7, #14
 8000556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800055a:	121b      	asrs	r3, r3, #8
 800055c:	b29b      	uxth	r3, r3
 800055e:	b2da      	uxtb	r2, r3
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8000566:	f107 030e 	add.w	r3, r7, #14
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	b2da      	uxtb	r2, r3
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	121b      	asrs	r3, r3, #8
 800057c:	b2da      	uxtb	r2, r3
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	b2da      	uxtb	r2, r3
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	715a      	strb	r2, [r3, #5]
	req_length = 6;
 8000592:	2306      	movs	r3, #6
 8000594:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint16_t crc = crc16(req, req_length);
 8000598:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800059c:	b29b      	uxth	r3, r3
 800059e:	f107 0214 	add.w	r2, r7, #20
 80005a2:	4610      	mov	r0, r2
 80005a4:	4619      	mov	r1, r3
 80005a6:	f7ff ff59 	bl	800045c <crc16>
 80005aa:	4603      	mov	r3, r0
 80005ac:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

	req[req_length++] = crc >> 8; 
 80005b0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80005b4:	1c5a      	adds	r2, r3, #1
 80005b6:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 80005ba:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 80005be:	0a12      	lsrs	r2, r2, #8
 80005c0:	b292      	uxth	r2, r2
 80005c2:	b2d1      	uxtb	r1, r2
 80005c4:	f107 0214 	add.w	r2, r7, #20
 80005c8:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff; 
 80005ca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	f8c7 2218 	str.w	r2, [r7, #536]	; 0x218
 80005d4:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 80005d8:	b2d1      	uxtb	r1, r2
 80005da:	f107 0214 	add.w	r2, r7, #20
 80005de:	54d1      	strb	r1, [r2, r3]
	int rc;	
	/* write request  to modbus line */
	
	rc =  write_modbus( req, req_length);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4618      	mov	r0, r3
 80005e6:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 80005ea:	f7ff ff6d 	bl	80004c8 <write_modbus>
 80005ee:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c

	/* if req was sent, recieve response */
	if (rc > 0) {
 80005f2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	dd0d      	ble.n	8000616 <modbus_RIB+0xee>
		rc = read_modbus( dst, 6); 
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	2106      	movs	r1, #6
 8000600:	f7ff ff70 	bl	80004e4 <read_modbus>
 8000604:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
		if (rc < 0) return -1; 
 8000608:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800060c:	2b00      	cmp	r3, #0
 800060e:	da02      	bge.n	8000616 <modbus_RIB+0xee>
 8000610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000614:	e001      	b.n	800061a <modbus_RIB+0xf2>

	}
	return rc;
 8000616:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
}
 800061a:	4618      	mov	r0, r3
 800061c:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <modbus_WIB>:


/* modbus write input bits */
int modbus_WIB( uint16_t address, int nb, uint8_t *src )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800062a:	af00      	add	r7, sp, #0
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	6019      	str	r1, [r3, #0]
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	f107 030e 	add.w	r3, r7, #14
 800063a:	4602      	mov	r2, r0
 800063c:	801a      	strh	r2, [r3, #0]
	/* first send request */

	uint8_t req[REQ_MAX_LEN];
	int byte_count; 
	int req_length; 
	int bit_check = 0; 
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	int pos = 0; 
 8000644:	2300      	movs	r3, #0
 8000646:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	
	req[0] = 0x36; 
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	2236      	movs	r2, #54	; 0x36
 8000650:	701a      	strb	r2, [r3, #0]
	req[1] = 0xF;
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	220f      	movs	r2, #15
 8000658:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 800065a:	f107 030e 	add.w	r3, r7, #14
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b29b      	uxth	r3, r3
 8000664:	b2da      	uxtb	r2, r3
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 800066c:	f107 030e 	add.w	r3, r7, #14
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	b2da      	uxtb	r2, r3
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	121b      	asrs	r3, r3, #8
 8000682:	b2da      	uxtb	r2, r3
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 8000698:	2306      	movs	r3, #6
 800069a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	
    	byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
 800069e:	f107 0308 	add.w	r3, r7, #8
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da00      	bge.n	80006aa <modbus_WIB+0x86>
 80006a8:	3307      	adds	r3, #7
 80006aa:	10db      	asrs	r3, r3, #3
 80006ac:	461a      	mov	r2, r3
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 0307 	and.w	r3, r3, #7
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	bf0c      	ite	eq
 80006bc:	2300      	moveq	r3, #0
 80006be:	2301      	movne	r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	4413      	add	r3, r2
 80006c4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  	req[req_length++] = byte_count;
 80006c8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006cc:	1c5a      	adds	r2, r3, #1
 80006ce:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 80006d2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80006d6:	b2d1      	uxtb	r1, r2
 80006d8:	f107 0210 	add.w	r2, r7, #16
 80006dc:	54d1      	strb	r1, [r2, r3]

	int i; 
    	for (i = 0; i < byte_count; i++) {
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80006e4:	e05c      	b.n	80007a0 <modbus_WIB+0x17c>
        
		int bit;
		bit = 0x01;
 80006e6:	2301      	movs	r3, #1
 80006e8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        	req[req_length] = 0;
 80006ec:	f107 0210 	add.w	r2, r7, #16
 80006f0:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80006f4:	4413      	add	r3, r2
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]

        	while ((bit & 0xFF) && (bit_check++ < nb)) {
 80006fa:	e038      	b.n	800076e <modbus_WIB+0x14a>
            		if (src[pos++])
 80006fc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	f8c7 2224 	str.w	r2, [r7, #548]	; 0x224
 8000706:	1d3a      	adds	r2, r7, #4
 8000708:	6812      	ldr	r2, [r2, #0]
 800070a:	4413      	add	r3, r2
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d013      	beq.n	800073a <modbus_WIB+0x116>
                		req[req_length] |= bit;
 8000712:	f107 0210 	add.w	r2, r7, #16
 8000716:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4313      	orrs	r3, r2
 8000728:	b2db      	uxtb	r3, r3
 800072a:	b2da      	uxtb	r2, r3
 800072c:	f107 0110 	add.w	r1, r7, #16
 8000730:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000734:	440b      	add	r3, r1
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	e014      	b.n	8000764 <modbus_WIB+0x140>
            		else
                		req[req_length] &=~ bit;
 800073a:	f107 0210 	add.w	r2, r7, #16
 800073e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000742:	4413      	add	r3, r2
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	b2da      	uxtb	r2, r3
 8000748:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800074c:	b2db      	uxtb	r3, r3
 800074e:	43db      	mvns	r3, r3
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4013      	ands	r3, r2
 8000754:	b2db      	uxtb	r3, r3
 8000756:	b2da      	uxtb	r2, r3
 8000758:	f107 0110 	add.w	r1, r7, #16
 800075c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000760:	440b      	add	r3, r1
 8000762:	701a      	strb	r2, [r3, #0]

            		bit = bit << 1;
 8000764:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        
		int bit;
		bit = 0x01;
        	req[req_length] = 0;

        	while ((bit & 0xFF) && (bit_check++ < nb)) {
 800076e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d009      	beq.n	800078c <modbus_WIB+0x168>
 8000778:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	f8c7 2228 	str.w	r2, [r7, #552]	; 0x228
 8000782:	f107 0208 	add.w	r2, r7, #8
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	4293      	cmp	r3, r2
 800078a:	dbb7      	blt.n	80006fc <modbus_WIB+0xd8>
                		req[req_length] &=~ bit;

            		bit = bit << 1;
        	}	
        	
		req_length++;
 800078c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8000790:	3301      	adds	r3, #1
 8000792:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	
    	byte_count = (nb / 8) + ((nb % 8) ? 1 : 0);
  	req[req_length++] = byte_count;

	int i; 
    	for (i = 0; i < byte_count; i++) {
 8000796:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800079a:	3301      	adds	r3, #1
 800079c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80007a0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80007a4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80007a8:	429a      	cmp	r2, r3
 80007aa:	db9c      	blt.n	80006e6 <modbus_WIB+0xc2>
        	}	
        	
		req_length++;
	 }

	uint16_t crc = crc16(req, req_length);
 80007ac:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	f107 0210 	add.w	r2, r7, #16
 80007b6:	4610      	mov	r0, r2
 80007b8:	4619      	mov	r1, r3
 80007ba:	f7ff fe4f 	bl	800045c <crc16>
 80007be:	4603      	mov	r3, r0
 80007c0:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216

	req[req_length++] = crc >> 8; 
 80007c4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 80007ce:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 80007d2:	0a12      	lsrs	r2, r2, #8
 80007d4:	b292      	uxth	r2, r2
 80007d6:	b2d1      	uxtb	r1, r2
 80007d8:	f107 0210 	add.w	r2, r7, #16
 80007dc:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff; 
 80007de:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 80007e8:	f8b7 2216 	ldrh.w	r2, [r7, #534]	; 0x216
 80007ec:	b2d1      	uxtb	r1, r2
 80007ee:	f107 0210 	add.w	r2, r7, #16
 80007f2:	54d1      	strb	r1, [r2, r3]
	
	/* write request  to modbus line */
	int rc =  write_modbus( req, req_length); 
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4618      	mov	r0, r3
 80007fa:	f8d7 122c 	ldr.w	r1, [r7, #556]	; 0x22c
 80007fe:	f7ff fe63 	bl	80004c8 <write_modbus>
 8000802:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	
	/* if req was sent read from modbus line */
	if (rc > 0) read_modbus( req, 8);
 8000806:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800080a:	2b00      	cmp	r3, #0
 800080c:	dd05      	ble.n	800081a <modbus_WIB+0x1f6>
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4618      	mov	r0, r3
 8000814:	2108      	movs	r1, #8
 8000816:	f7ff fe65 	bl	80004e4 <read_modbus>
	return rc;
 800081a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
}
 800081e:	4618      	mov	r0, r3
 8000820:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <modbus_WR>:

/* Write the values from the array to the registers of the remote device */
int modbus_WR( int address, int nb, const uint16_t *src)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 800082e:	af00      	add	r7, sp, #0
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	6018      	str	r0, [r3, #0]
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	6019      	str	r1, [r3, #0]
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	601a      	str	r2, [r3, #0]
    	int req_length;
    	int byte_count;

    	uint8_t req[REQ_MAX_LEN];

	req[0] = 0x36; 
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2236      	movs	r2, #54	; 0x36
 8000846:	701a      	strb	r2, [r3, #0]
	req[1] = 0x10;
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2210      	movs	r2, #16
 800084e:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	121b      	asrs	r3, r3, #8
 8000858:	b2da      	uxtb	r2, r3
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	121b      	asrs	r3, r3, #8
 8000876:	b2da      	uxtb	r2, r3
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 800088c:	2306      	movs	r3, #6
 800088e:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	
   	byte_count = nb * 2;
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    	req[req_length++] = byte_count;
 800089e:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 80008a8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80008ac:	b2d1      	uxtb	r1, r2
 80008ae:	f107 0214 	add.w	r2, r7, #20
 80008b2:	54d1      	strb	r1, [r2, r3]

    	for (i = 0; i < nb; i++) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80008ba:	e026      	b.n	800090a <modbus_WR+0xe2>
		req[req_length++] = src[i] >> 8;
 80008bc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 80008c6:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80008ca:	0052      	lsls	r2, r2, #1
 80008cc:	1d39      	adds	r1, r7, #4
 80008ce:	6809      	ldr	r1, [r1, #0]
 80008d0:	440a      	add	r2, r1
 80008d2:	8812      	ldrh	r2, [r2, #0]
 80008d4:	0a12      	lsrs	r2, r2, #8
 80008d6:	b292      	uxth	r2, r2
 80008d8:	b2d1      	uxtb	r1, r2
 80008da:	f107 0214 	add.w	r2, r7, #20
 80008de:	54d1      	strb	r1, [r2, r3]
        	req[req_length++] = src[i] & 0x00ff;
 80008e0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 80008ea:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80008ee:	0052      	lsls	r2, r2, #1
 80008f0:	1d39      	adds	r1, r7, #4
 80008f2:	6809      	ldr	r1, [r1, #0]
 80008f4:	440a      	add	r2, r1
 80008f6:	8812      	ldrh	r2, [r2, #0]
 80008f8:	b2d1      	uxtb	r1, r2
 80008fa:	f107 0214 	add.w	r2, r7, #20
 80008fe:	54d1      	strb	r1, [r2, r3]
	req_length = 6; 
	
   	byte_count = nb * 2;
    	req[req_length++] = byte_count;

    	for (i = 0; i < nb; i++) {
 8000900:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000904:	3301      	adds	r3, #1
 8000906:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbd1      	blt.n	80008bc <modbus_WR+0x94>
		req[req_length++] = src[i] >> 8;
        	req[req_length++] = src[i] & 0x00ff;
    	}

	uint16_t crc = crc16(req, req_length);
 8000918:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800091c:	b29b      	uxth	r3, r3
 800091e:	f107 0214 	add.w	r2, r7, #20
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	f7ff fd99 	bl	800045c <crc16>
 800092a:	4603      	mov	r3, r0
 800092c:	f8a7 321a 	strh.w	r3, [r7, #538]	; 0x21a

	req[req_length++] = crc >> 8; 
 8000930:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 800093a:	f8b7 221a 	ldrh.w	r2, [r7, #538]	; 0x21a
 800093e:	0a12      	lsrs	r2, r2, #8
 8000940:	b292      	uxth	r2, r2
 8000942:	b2d1      	uxtb	r1, r2
 8000944:	f107 0214 	add.w	r2, r7, #20
 8000948:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff;
 800094a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	f8c7 2220 	str.w	r2, [r7, #544]	; 0x220
 8000954:	f8b7 221a 	ldrh.w	r2, [r7, #538]	; 0x21a
 8000958:	b2d1      	uxtb	r1, r2
 800095a:	f107 0214 	add.w	r2, r7, #20
 800095e:	54d1      	strb	r1, [r2, r3]


	/* write request  to modbus line */
	rc = write_modbus( req, req_length); 
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4618      	mov	r0, r3
 8000966:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800096a:	f7ff fdad 	bl	80004c8 <write_modbus>
 800096e:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	
	/* if req was sent, read from modbus line */ 

	if (rc > 0) read_modbus(req, 8);
 8000972:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000976:	2b00      	cmp	r3, #0
 8000978:	dd05      	ble.n	8000986 <modbus_WR+0x15e>
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4618      	mov	r0, r3
 8000980:	2108      	movs	r1, #8
 8000982:	f7ff fdaf 	bl	80004e4 <read_modbus>
	return rc;
 8000986:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
}
 800098a:	4618      	mov	r0, r3
 800098c:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <modbus_RR>:


/* Read the values from the array to the registers of the remote device */
int modbus_RR( int address, int nb, uint16_t *src)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	f5ad 6d85 	sub.w	sp, sp, #1064	; 0x428
 800099a:	af00      	add	r7, sp, #0
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	6018      	str	r0, [r3, #0]
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	6019      	str	r1, [r3, #0]
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	601a      	str	r2, [r3, #0]
    	int req_length;
	int byte_count;
    	uint8_t req[REQ_MAX_LEN];
  	uint8_t rsp[REQ_MAX_LEN];

	req[0] = 0x36; 
 80009ac:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80009b0:	2236      	movs	r2, #54	; 0x36
 80009b2:	701a      	strb	r2, [r3, #0]
	req[1] = 0x4;
 80009b4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80009b8:	2204      	movs	r2, #4
 80009ba:	705a      	strb	r2, [r3, #1]
	req[2] = address >> 8;
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	121b      	asrs	r3, r3, #8
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80009ca:	709a      	strb	r2, [r3, #2]
	req[3] = address & 0x00ff;
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80009d8:	70da      	strb	r2, [r3, #3]
	req[4] = nb >> 8;
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	121b      	asrs	r3, r3, #8
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80009e8:	711a      	strb	r2, [r3, #4]
	req[5] = nb & 0x00ff; 
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80009f6:	715a      	strb	r2, [r3, #5]
	req_length = 6; 
 80009f8:	2306      	movs	r3, #6
 80009fa:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
   	
	byte_count = nb * 2;
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
    	req[req_length++] = byte_count;
 8000a0a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8000a14:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8000a18:	b2d1      	uxtb	r1, r2
 8000a1a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8000a1e:	54d1      	strb	r1, [r2, r3]
	
	
	uint16_t crc = crc16(req, req_length);
 8000a20:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f7ff fd15 	bl	800045c <crc16>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a

	req[req_length++] = crc >> 8; 
 8000a38:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8000a3c:	1c5a      	adds	r2, r3, #1
 8000a3e:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8000a42:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 8000a46:	0a12      	lsrs	r2, r2, #8
 8000a48:	b292      	uxth	r2, r2
 8000a4a:	b2d1      	uxtb	r1, r2
 8000a4c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8000a50:	54d1      	strb	r1, [r2, r3]
	req[req_length++] = crc & 0x00ff; 
 8000a52:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	f8c7 2420 	str.w	r2, [r7, #1056]	; 0x420
 8000a5c:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 8000a60:	b2d1      	uxtb	r1, r2
 8000a62:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8000a66:	54d1      	strb	r1, [r2, r3]
	
	/* write request  to modbus line */
	rc = write_modbus( req, req_length); 
 8000a68:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 8000a72:	f7ff fd29 	bl	80004c8 <write_modbus>
 8000a76:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
	
	if (rc < 0 ) return -1; 	
 8000a7a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da02      	bge.n	8000a88 <modbus_RR+0xf4>
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a86:	e040      	b.n	8000b0a <modbus_RR+0x176>
	
	rc = read_modbus( rsp, nb*2 + 5);
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	3305      	adds	r3, #5
 8000a92:	f107 0210 	add.w	r2, r7, #16
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f7ff fd23 	bl	80004e4 <read_modbus>
 8000a9e:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
	
	int offset = 2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	
	for (i = 0; i < nb; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8000aae:	e024      	b.n	8000afa <modbus_RR+0x166>
            /* shift reg hi_byte to temp OR with lo_byte */
            src[i] = (rsp[offset + 2 + (i << 1)] << 8) |
 8000ab0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	1d3a      	adds	r2, r7, #4
 8000ab8:	6812      	ldr	r2, [r2, #0]
 8000aba:	4413      	add	r3, r2
 8000abc:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8000ac0:	1c91      	adds	r1, r2, #2
 8000ac2:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8000ac6:	0052      	lsls	r2, r2, #1
 8000ac8:	440a      	add	r2, r1
 8000aca:	f107 0110 	add.w	r1, r7, #16
 8000ace:	5c8a      	ldrb	r2, [r1, r2]
 8000ad0:	0212      	lsls	r2, r2, #8
 8000ad2:	b291      	uxth	r1, r2
                rsp[offset + 3 + (i << 1)];
 8000ad4:	f8d7 2410 	ldr.w	r2, [r7, #1040]	; 0x410
 8000ad8:	1cd0      	adds	r0, r2, #3
 8000ada:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8000ade:	0052      	lsls	r2, r2, #1
 8000ae0:	4402      	add	r2, r0
 8000ae2:	f107 0010 	add.w	r0, r7, #16
 8000ae6:	5c82      	ldrb	r2, [r0, r2]
	
	int offset = 2;
	
	for (i = 0; i < nb; i++) {
            /* shift reg hi_byte to temp OR with lo_byte */
            src[i] = (rsp[offset + 2 + (i << 1)] << 8) |
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	b292      	uxth	r2, r2
 8000aec:	b292      	uxth	r2, r2
 8000aee:	801a      	strh	r2, [r3, #0]
	
	rc = read_modbus( rsp, nb*2 + 5);
	
	int offset = 2;
	
	for (i = 0; i < nb; i++) {
 8000af0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8000af4:	3301      	adds	r3, #1
 8000af6:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dbd3      	blt.n	8000ab0 <modbus_RR+0x11c>
            src[i] = (rsp[offset + 2 + (i << 1)] << 8) |
                rsp[offset + 3 + (i << 1)];
		
        }

	return 0;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f507 6785 	add.w	r7, r7, #1064	; 0x428
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <modbusMOTOR_task>:

void modbusMOTOR_task(void * pvParameters)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	uint8_t src[4];
	uint16_t tab_reg[10];
	uint16_t spd[5]; 
	
	
	src[0]=1; src[1]=1; src[2]=1; src[3]=1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000b22:	2301      	movs	r3, #1
 8000b24:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	
	spd[0]=2000;spd[1]=0;spd[2]=2250;spd[3]=15;spd[4]=15;
 8000b34:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b38:	813b      	strh	r3, [r7, #8]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	817b      	strh	r3, [r7, #10]
 8000b3e:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8000b42:	81bb      	strh	r3, [r7, #12]
 8000b44:	230f      	movs	r3, #15
 8000b46:	81fb      	strh	r3, [r7, #14]
 8000b48:	230f      	movs	r3, #15
 8000b4a:	823b      	strh	r3, [r7, #16]
	
	
	if ( modbus_RIB( 0,8,dest) < 0 )
 8000b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b50:	2000      	movs	r0, #0
 8000b52:	2108      	movs	r1, #8
 8000b54:	461a      	mov	r2, r3
 8000b56:	f7ff fce7 	bl	8000528 <modbus_RIB>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da02      	bge.n	8000b66 <modbusMOTOR_task+0x52>
	{
		 vTaskDelete( NULL );;
 8000b60:	2000      	movs	r0, #0
 8000b62:	f000 faa5 	bl	80010b0 <vTaskDelete>
	}
	
	modbus_RR(0,10,tab_reg);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	210a      	movs	r1, #10
 8000b6e:	461a      	mov	r2, r3
 8000b70:	f7ff ff10 	bl	8000994 <modbus_RR>
	
	modbus_WIB( 0, 3, src);
 8000b74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b78:	2000      	movs	r0, #0
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	f7ff fd51 	bl	8000624 <modbus_WIB>
	
	modbus_WR( 0, 5, spd);
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	2000      	movs	r0, #0
 8000b88:	2105      	movs	r1, #5
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	f7ff fe4c 	bl	8000828 <modbus_WR>
	
	const portTickType xDelay = 500 / portTICK_RATE_MS;
 8000b90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b94:	637b      	str	r3, [r7, #52]	; 0x34
	
	for (;;)
	{
		
		modbus_RR(0, 10, tab_reg);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	210a      	movs	r1, #10
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	f7ff fef8 	bl	8000994 <modbus_RR>
		vTaskDelay( xDelay );
 8000ba4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ba6:	f000 fb21 	bl	80011ec <vTaskDelay>
	
	}
 8000baa:	e7f4      	b.n	8000b96 <modbusMOTOR_task+0x82>

08000bac <NVIC_SetPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <NVIC_SetPendingIRQ+0x30>)
 8000bb8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000bbc:	0952      	lsrs	r2, r2, #5
 8000bbe:	79f9      	ldrb	r1, [r7, #7]
 8000bc0:	f001 011f 	and.w	r1, r1, #31
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f101 	lsl.w	r1, r0, r1
 8000bca:	3240      	adds	r2, #64	; 0x40
 8000bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <main>:
volatile unsigned long ulButtonPressCounts = 0UL;

/*-----------------------------------------------------------*/

int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af04      	add	r7, sp, #16
	/* Configure the hardware ready to run the test. */
	prvSetupHardware();
 8000be6:	f000 f819 	bl	8000c1c <prvSetupHardware>
	/* Start standard demo/test application flash tasks.  See the comments at
	the top of this file.  The LED flash tasks are always created.  The other
	tasks are only created if mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to
	0 (at the top of this file).  See the comments at the top of this file for
	more information. */
	vStartLEDFlashTasks( mainFLASH_TASK_PRIORITY );
 8000bea:	2001      	movs	r0, #1
 8000bec:	f002 f958 	bl	8002ea0 <vStartLEDFlashTasks>


	/*------------------added by Matic Knap 24 Jun 2014 ---------------------------------*/
	
	xTaskCreate(modbusMOTOR_task, "modbus", configMINIMAL_STACK_SIZE * 2, NULL, mainFLASH_TASK_PRIORITY, NULL);
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9303      	str	r3, [sp, #12]
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <main+0x34>)
 8000c02:	4905      	ldr	r1, [pc, #20]	; (8000c18 <main+0x38>)
 8000c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f000 f99d 	bl	8000f48 <xTaskGenericCreate>
	mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY is set to 0 (at the top of this
	file).  See the comments at the top of this file for more information. */
	//prvOptionallyCreateComprehensveTestApplication();

	/* Start the scheduler. */
	vTaskStartScheduler();
 8000c0e:	f000 fb15 	bl	800123c <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
 8000c12:	e7fe      	b.n	8000c12 <main+0x32>
 8000c14:	08000b15 	.word	0x08000b15
 8000c18:	0800417c 	.word	0x0800417c

08000c1c <prvSetupHardware>:
	}
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	/* Setup STM32 system (clock, PLL and Flash configuration) */
	SystemInit();
 8000c20:	f000 f8e4 	bl	8000dec <SystemInit>

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );
 8000c24:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000c28:	f002 f9dc 	bl	8002fe4 <NVIC_PriorityGroupConfig>
	
	init_USART1();
 8000c2c:	f7ff fb70 	bl	8000310 <init_USART1>
	/* Setup the LED outputs. */
	vParTestInitialise();
 8000c30:	f000 f882 	bl	8000d38 <vParTestInitialise>

	/* Configure the button input.  This configures the interrupt to use the
	lowest interrupt priority, so it is ok to use the ISR safe FreeRTOS API
	from the button interrupt handler. */
	//STM_EVAL_PBInit( BUTTON_USER, BUTTON_MODE_EXTI );
}
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop

08000c38 <vApplicationTickHook>:
/*-----------------------------------------------------------*/

void vApplicationTickHook( void )
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	#if ( mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY == 0 )
	{
		/* Just to verify that the interrupt nesting behaves as expected,
		increment ulFPUInterruptNesting on entry, and decrement it on exit. */
		ulFPUInterruptNesting++;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <vApplicationTickHook+0x20>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <vApplicationTickHook+0x20>)
 8000c44:	601a      	str	r2, [r3, #0]

		/* Trigger a timer 2 interrupt, which will fill the registers with a
		different value and itself trigger a timer 3 interrupt.  Note that the
		timers are not actually used.  The timer 2 and 3 interrupt vectors are
		just used for convenience. */
		NVIC_SetPendingIRQ( TIM2_IRQn );
 8000c46:	201c      	movs	r0, #28
 8000c48:	f7ff ffb0 	bl	8000bac <NVIC_SetPendingIRQ>
		/* Ensure that, after returning from the nested interrupts, all the FPU
		registers contain the value to which they were set by the tick hook
		function. */
		//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 0UL ) );

		ulFPUInterruptNesting--;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <vApplicationTickHook+0x20>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	4b01      	ldr	r3, [pc, #4]	; (8000c58 <vApplicationTickHook+0x20>)
 8000c54:	601a      	str	r2, [r3, #0]
	}
	#endif
}
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000478 	.word	0x20000478

08000c5c <TIM3_IRQHandler>:
	NVIC_Init( &NVIC_InitStructure );
}
/*-----------------------------------------------------------*/

void TIM3_IRQHandler( void )
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <TIM3_IRQHandler+0x34>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <TIM3_IRQHandler+0x34>)
 8000c68:	601a      	str	r2, [r3, #0]

	/* This is the highest priority interrupt in the chain of forced nesting
	interrupts, so latch the maximum value reached by ulFPUInterruptNesting.
	This is done purely to allow verification that the nesting depth reaches
	that intended. */
	if( ulFPUInterruptNesting > ulMaxFPUInterruptNesting )
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <TIM3_IRQHandler+0x34>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <TIM3_IRQHandler+0x38>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d903      	bls.n	8000c7e <TIM3_IRQHandler+0x22>
	{
		ulMaxFPUInterruptNesting = ulFPUInterruptNesting;
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <TIM3_IRQHandler+0x34>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <TIM3_IRQHandler+0x38>)
 8000c7c:	601a      	str	r2, [r3, #0]

	/* Fill the FPU registers with 99 to overwrite the values written by
	TIM2_IRQHandler(). */
	//vRegTestClearFlopRegistersToParameterValue( 99UL );

	ulFPUInterruptNesting--;
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <TIM3_IRQHandler+0x34>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	1e5a      	subs	r2, r3, #1
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <TIM3_IRQHandler+0x34>)
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	20000478 	.word	0x20000478
 8000c94:	2000047c 	.word	0x2000047c

08000c98 <TIM2_IRQHandler>:
/*-----------------------------------------------------------*/

void TIM2_IRQHandler( void )
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	/* Just to verify that the interrupt nesting behaves as expected, increment
	ulFPUInterruptNesting on entry, and decrement it on exit. */
	ulFPUInterruptNesting++;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <TIM2_IRQHandler+0x20>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <TIM2_IRQHandler+0x20>)
 8000ca4:	601a      	str	r2, [r3, #0]
	/* Fill the FPU registers with 1. */
	//vRegTestClearFlopRegistersToParameterValue( 1UL );

	/* Trigger a timer 3 interrupt, which will fill the registers with a
	different value. */
	NVIC_SetPendingIRQ( TIM3_IRQn );
 8000ca6:	201d      	movs	r0, #29
 8000ca8:	f7ff ff80 	bl	8000bac <NVIC_SetPendingIRQ>
	/* Ensure that, after returning from the nesting interrupt, all the FPU
	registers contain the value to which they were set by this interrupt
	function. */
	//configASSERT( ulRegTestCheckFlopRegistersContainParameterValue( 1UL ) );

	ulFPUInterruptNesting--;
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <TIM2_IRQHandler+0x20>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	1e5a      	subs	r2, r3, #1
 8000cb2:	4b01      	ldr	r3, [pc, #4]	; (8000cb8 <TIM2_IRQHandler+0x20>)
 8000cb4:	601a      	str	r2, [r3, #0]
}
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000478 	.word	0x20000478

08000cbc <EXTI9_5_IRQHandler>:
	#endif /* mainCREATE_SIMPLE_LED_FLASHER_DEMO_ONLY */
}
/*-----------------------------------------------------------*/

void EXTI9_5_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
long lHigherPriorityTaskWoken = pdFALSE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]

	/* Only line 6 is enabled, so there is no need to test which line generated
	the interrupt. */
	EXTI_ClearITPendingBit( EXTI_Line6 );
 8000cc6:	2040      	movs	r0, #64	; 0x40
 8000cc8:	f002 fa30 	bl	800312c <EXTI_ClearITPendingBit>

	/* This interrupt does nothing more than demonstrate how to synchronise a
	task with an interrupt.  First the handler releases a semaphore.
	lHigherPriorityTaskWoken has been initialised to zero. */
	xSemaphoreGiveFromISR( xTestSemaphore, &lHigherPriorityTaskWoken );
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <EXTI9_5_IRQHandler+0x38>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f001 f967 	bl	8001fac <xQueueGenericSendFromISR>
	semaphore caused the task to unblock, and the unblocked task has a priority
	higher than the currently executing task (the task that this interrupt
	interrupted), then lHigherPriorityTaskWoken will have been set to pdTRUE.
	Passing pdTRUE into the following macro call will cause this interrupt to
	return directly to the unblocked, higher priority, task. */
	portEND_SWITCHING_ISR( lHigherPriorityTaskWoken );
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <EXTI9_5_IRQHandler+0x30>
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <EXTI9_5_IRQHandler+0x3c>)
 8000ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cea:	601a      	str	r2, [r3, #0]
}
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000480 	.word	0x20000480
 8000cf8:	e000ed04 	.word	0xe000ed04

08000cfc <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 8000d00:	f001 fd64 	bl	80027cc <ulPortSetInterruptMask>
	for( ;; );
 8000d04:	e7fe      	b.n	8000d04 <vApplicationMallocFailedHook+0x8>
 8000d06:	bf00      	nop

08000d08 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	unction, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 8000d1e:	f001 fd55 	bl	80027cc <ulPortSetInterruptMask>
	for( ;; );
 8000d22:	e7fe      	b.n	8000d22 <vApplicationStackOverflowHook+0xe>

08000d24 <assert_failed>:
}
///*-----------------------------------------------------------*/
void assert_failed(uint8_t* file, uint32_t line){
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]

}
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <vParTestInitialise>:
static const Led_TypeDef xLEDs[ partstMAX_LEDS ] = { LED3, LED4, LED5, LED6 };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	/* Initialise all four LEDs that are built onto the starter kit. */
	STM_EVAL_LEDInit( LED3 );
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f002 f905 	bl	8002f4c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED4 );
 8000d42:	2000      	movs	r0, #0
 8000d44:	f002 f902 	bl	8002f4c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED5 );
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f002 f8ff 	bl	8002f4c <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit( LED6 );
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f002 f8fc 	bl	8002f4c <STM_EVAL_LEDInit>
}
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop

08000d58 <vParTestToggleLED>:
	}
}
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned long ulLED )
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	if( ulLED < partstMAX_LEDS )
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d80a      	bhi.n	8000d7c <vParTestToggleLED+0x24>
	{
		taskENTER_CRITICAL();
 8000d66:	f001 fd0f 	bl	8002788 <vPortEnterCritical>
		{
			STM_EVAL_LEDToggle( xLEDs[ ulLED ] );
 8000d6a:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <vParTestToggleLED+0x2c>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4413      	add	r3, r2
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 f918 	bl	8002fa8 <STM_EVAL_LEDToggle>
		}
		taskEXIT_CRITICAL();
 8000d78:	f001 fd16 	bl	80027a8 <vPortExitCritical>
	}
}
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	0800454c 	.word	0x0800454c

08000d88 <Reset_Handler>:
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f000 b804 	b.w	8000d96 <LoopCopyDataInit>

08000d8e <CopyDataInit>:
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <LoopFillZerobss+0x22>)
 8000d90:	585b      	ldr	r3, [r3, r1]
 8000d92:	5043      	str	r3, [r0, r1]
 8000d94:	3104      	adds	r1, #4

08000d96 <LoopCopyDataInit>:
 8000d96:	480f      	ldr	r0, [pc, #60]	; (8000dd4 <LoopFillZerobss+0x26>)
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <LoopFillZerobss+0x2a>)
 8000d9a:	1842      	adds	r2, r0, r1
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f4ff aff6 	bcc.w	8000d8e <CopyDataInit>
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopFillZerobss+0x2e>)
 8000da4:	f000 b803 	b.w	8000dae <LoopFillZerobss>

08000da8 <FillZerobss>:
 8000da8:	2300      	movs	r3, #0
 8000daa:	f842 3b04 	str.w	r3, [r2], #4

08000dae <LoopFillZerobss>:
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <LoopFillZerobss+0x32>)
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f4ff aff9 	bcc.w	8000da8 <FillZerobss>
 8000db6:	480b      	ldr	r0, [pc, #44]	; (8000de4 <LoopFillZerobss+0x36>)
 8000db8:	6801      	ldr	r1, [r0, #0]
 8000dba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000dbe:	6001      	str	r1, [r0, #0]
 8000dc0:	f000 f814 	bl	8000dec <SystemInit>
 8000dc4:	f003 f8b8 	bl	8003f38 <__libc_init_array>
 8000dc8:	f7ff ff0a 	bl	8000be0 <main>
 8000dcc:	4770      	bx	lr
 8000dce:	0000      	.short	0x0000
 8000dd0:	080045a8 	.word	0x080045a8
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000458 	.word	0x20000458
 8000ddc:	20000458 	.word	0x20000458
 8000de0:	20013254 	.word	0x20013254
 8000de4:	e000ed88 	.word	0xe000ed88

08000de8 <ADC_IRQHandler>:
 8000de8:	f7ff bffe 	b.w	8000de8 <ADC_IRQHandler>

08000dec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <SystemInit+0x5c>)
 8000df2:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <SystemInit+0x5c>)
 8000df4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000df8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <SystemInit+0x60>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <SystemInit+0x60>)
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	f042 0201 	orr.w	r2, r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <SystemInit+0x60>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e12:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <SystemInit+0x60>)
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <SystemInit+0x60>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e20:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <SystemInit+0x60>)
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SystemInit+0x64>)
 8000e26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <SystemInit+0x60>)
 8000e2a:	4a08      	ldr	r2, [pc, #32]	; (8000e4c <SystemInit+0x60>)
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e32:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SystemInit+0x60>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000e3a:	f000 f80b 	bl	8000e54 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e3e:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <SystemInit+0x5c>)
 8000e40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e44:	609a      	str	r2, [r3, #8]
#endif
}
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	24003010 	.word	0x24003010

08000e54 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000e62:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <SetSysClock+0xe4>)
 8000e64:	4a34      	ldr	r2, [pc, #208]	; (8000f38 <SetSysClock+0xe4>)
 8000e66:	6812      	ldr	r2, [r2, #0]
 8000e68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000e6c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000e6e:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <SetSysClock+0xe4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e76:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d103      	bne.n	8000e8c <SetSysClock+0x38>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e8a:	d1f0      	bne.n	8000e6e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e8c:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <SetSysClock+0xe4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	e001      	b.n	8000ea2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d142      	bne.n	8000f2e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <SetSysClock+0xe4>)
 8000eaa:	4a23      	ldr	r2, [pc, #140]	; (8000f38 <SetSysClock+0xe4>)
 8000eac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000eae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000eb2:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <SetSysClock+0xe8>)
 8000eb6:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <SetSysClock+0xe8>)
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ebe:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <SetSysClock+0xe4>)
 8000ec2:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <SetSysClock+0xe4>)
 8000ec4:	6892      	ldr	r2, [r2, #8]
 8000ec6:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <SetSysClock+0xe4>)
 8000eca:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <SetSysClock+0xe4>)
 8000ecc:	6892      	ldr	r2, [r2, #8]
 8000ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ed2:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <SetSysClock+0xe4>)
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <SetSysClock+0xe4>)
 8000ed8:	6892      	ldr	r2, [r2, #8]
 8000eda:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000ede:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <SetSysClock+0xe4>)
 8000ee2:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <SetSysClock+0xec>)
 8000ee4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <SetSysClock+0xe4>)
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <SetSysClock+0xe4>)
 8000eea:	6812      	ldr	r2, [r2, #0]
 8000eec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ef0:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ef2:	bf00      	nop
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <SetSysClock+0xe4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0f9      	beq.n	8000ef4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <SetSysClock+0xf0>)
 8000f02:	f240 6204 	movw	r2, #1540	; 0x604
 8000f06:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <SetSysClock+0xe4>)
 8000f0a:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <SetSysClock+0xe4>)
 8000f0c:	6892      	ldr	r2, [r2, #8]
 8000f0e:	f022 0203 	bic.w	r2, r2, #3
 8000f12:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <SetSysClock+0xe4>)
 8000f16:	4a08      	ldr	r2, [pc, #32]	; (8000f38 <SetSysClock+0xe4>)
 8000f18:	6892      	ldr	r2, [r2, #8]
 8000f1a:	f042 0202 	orr.w	r2, r2, #2
 8000f1e:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000f20:	bf00      	nop
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SetSysClock+0xe4>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d1f9      	bne.n	8000f22 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40007000 	.word	0x40007000
 8000f40:	07404b19 	.word	0x07404b19
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <xTaskGenericCreate>:
	static portTickType prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;

#endif

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	4613      	mov	r3, r2
 8000f56:	80fb      	strh	r3, [r7, #6]
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d102      	bne.n	8000f64 <xTaskGenericCreate+0x1c>
 8000f5e:	f001 fc35 	bl	80027cc <ulPortSetInterruptMask>
 8000f62:	e7fe      	b.n	8000f62 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
 8000f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d902      	bls.n	8000f70 <xTaskGenericCreate+0x28>
 8000f6a:	f001 fc2f 	bl	80027cc <ulPortSetInterruptMask>
 8000f6e:	e7fe      	b.n	8000f6e <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	4618      	mov	r0, r3
 8000f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f76:	f000 fdc7 	bl	8001b08 <prvAllocateTCBAndStack>
 8000f7a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d072      	beq.n	8001068 <xTaskGenericCreate+0x120>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f86:	88fb      	ldrh	r3, [r7, #6]
 8000f88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f023 0307 	bic.w	r3, r3, #7
 8000f9a:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <xTaskGenericCreate+0x64>
 8000fa6:	f001 fc11 	bl	80027cc <ulPortSetInterruptMask>
 8000faa:	e7fe      	b.n	8000faa <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	9300      	str	r3, [sp, #0]
 8000fb0:	69b8      	ldr	r0, [r7, #24]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb8:	f000 fcb0 	bl	800191c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	68f9      	ldr	r1, [r7, #12]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	f001 fb11 	bl	80025e8 <pxPortInitialiseStack>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8000fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	601a      	str	r2, [r3, #0]
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8000fd8:	f001 fbd6 	bl	8002788 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <xTaskGenericCreate+0x150>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <xTaskGenericCreate+0x150>)
 8000fe4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <xTaskGenericCreate+0x154>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <xTaskGenericCreate+0x154>)
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <xTaskGenericCreate+0x150>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d10f      	bne.n	800101c <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8000ffc:	f000 fcd6 	bl	80019ac <prvInitialiseTaskLists>
 8001000:	e00c      	b.n	800101c <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <xTaskGenericCreate+0x158>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d108      	bne.n	800101c <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <xTaskGenericCreate+0x154>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001012:	429a      	cmp	r2, r3
 8001014:	d802      	bhi.n	800101c <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <xTaskGenericCreate+0x154>)
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	601a      	str	r2, [r3, #0]
					}
				}
			}

			uxTaskNumber++;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <xTaskGenericCreate+0x15c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <xTaskGenericCreate+0x15c>)
 8001024:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <xTaskGenericCreate+0x15c>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	641a      	str	r2, [r3, #64]	; 0x40
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <xTaskGenericCreate+0x160>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	429a      	cmp	r2, r3
 8001038:	d903      	bls.n	8001042 <xTaskGenericCreate+0xfa>
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <xTaskGenericCreate+0x160>)
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <xTaskGenericCreate+0x164>)
 8001050:	441a      	add	r2, r3
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	3304      	adds	r3, #4
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f001 fa3f 	bl	80024dc <vListInsertEnd>

			xReturn = pdPASS;
 800105e:	2301      	movs	r3, #1
 8001060:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8001062:	f001 fba1 	bl	80027a8 <vPortExitCritical>
 8001066:	e002      	b.n	800106e <xTaskGenericCreate+0x126>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800106c:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d10b      	bne.n	800108c <xTaskGenericCreate+0x144>
	{
		if( xSchedulerRunning != pdFALSE )
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <xTaskGenericCreate+0x158>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <xTaskGenericCreate+0x144>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <xTaskGenericCreate+0x154>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001084:	429a      	cmp	r2, r3
 8001086:	d201      	bcs.n	800108c <xTaskGenericCreate+0x144>
			{
				portYIELD_WITHIN_API();
 8001088:	f001 fb6e 	bl	8002768 <vPortYield>
			}
		}
	}

	return xReturn;
 800108c:	69fb      	ldr	r3, [r7, #28]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3720      	adds	r7, #32
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2000055c 	.word	0x2000055c
 800109c:	20000484 	.word	0x20000484
 80010a0:	20000568 	.word	0x20000568
 80010a4:	2000057c 	.word	0x2000057c
 80010a8:	20000564 	.word	0x20000564
 80010ac:	20000488 	.word	0x20000488

080010b0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle xTaskToDelete )
	{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 80010b8:	f001 fb66 	bl	8002788 <vPortEnterCritical>
		{
			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <vTaskDelete+0x18>
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <vTaskDelete+0x78>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	e000      	b.n	80010ca <vTaskDelete+0x1a>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3304      	adds	r3, #4
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fa5f 	bl	8002594 <uxListRemove>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3318      	adds	r3, #24
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fa56 	bl	8002594 <uxListRemove>
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	3304      	adds	r3, #4
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <vTaskDelete+0x7c>)
 80010ee:	4619      	mov	r1, r3
 80010f0:	f001 f9f4 	bl	80024dc <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <vTaskDelete+0x80>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1c5a      	adds	r2, r3, #1
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <vTaskDelete+0x80>)
 80010fc:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <vTaskDelete+0x84>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <vTaskDelete+0x84>)
 8001106:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8001108:	f001 fb4e 	bl	80027a8 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <vTaskDelete+0x88>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <vTaskDelete+0x72>
		{
			if( pxTCB == pxCurrentTCB )
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <vTaskDelete+0x78>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	429a      	cmp	r2, r3
 800111c:	d101      	bne.n	8001122 <vTaskDelete+0x72>
			{
				portYIELD_WITHIN_API();
 800111e:	f001 fb23 	bl	8002768 <vPortYield>
			}
		}
	}
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000484 	.word	0x20000484
 800112c:	20000530 	.word	0x20000530
 8001130:	20000544 	.word	0x20000544
 8001134:	2000057c 	.word	0x2000057c
 8001138:	20000568 	.word	0x20000568

0800113c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <vTaskDelayUntil+0x1a>
 8001150:	f001 fb3c 	bl	80027cc <ulPortSetInterruptMask>
 8001154:	e7fe      	b.n	8001154 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <vTaskDelayUntil+0x26>
 800115c:	f001 fb36 	bl	80027cc <ulPortSetInterruptMask>
 8001160:	e7fe      	b.n	8001160 <vTaskDelayUntil+0x24>

		vTaskSuspendAll();
 8001162:	f000 f8a3 	bl	80012ac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <vTaskDelayUntil+0xa8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	4413      	add	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	429a      	cmp	r2, r3
 800117e:	d90b      	bls.n	8001198 <vTaskDelayUntil+0x5c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	429a      	cmp	r2, r3
 8001188:	d911      	bls.n	80011ae <vTaskDelayUntil+0x72>
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	429a      	cmp	r2, r3
 8001190:	d90d      	bls.n	80011ae <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 8001192:	2301      	movs	r3, #1
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e00a      	b.n	80011ae <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d803      	bhi.n	80011aa <vTaskDelayUntil+0x6e>
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d901      	bls.n	80011ae <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <vTaskDelayUntil+0x90>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <vTaskDelayUntil+0xac>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3304      	adds	r3, #4
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 f9e7 	bl	8002594 <uxListRemove>
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	f000 fc68 	bl	8001a9c <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80011cc:	f000 f87c 	bl	80012c8 <xTaskResumeAll>
 80011d0:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <vTaskDelayUntil+0xa0>
		{
			portYIELD_WITHIN_API();
 80011d8:	f001 fac6 	bl	8002768 <vPortYield>
		}
	}
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000560 	.word	0x20000560
 80011e8:	20000484 	.word	0x20000484

080011ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d012      	beq.n	8001224 <vTaskDelay+0x38>
		{
			vTaskSuspendAll();
 80011fe:	f000 f855 	bl	80012ac <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <vTaskDelay+0x48>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <vTaskDelay+0x4c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3304      	adds	r3, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f001 f9be 	bl	8002594 <uxListRemove>
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f000 fc3f 	bl	8001a9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800121e:	f000 f853 	bl	80012c8 <xTaskResumeAll>
 8001222:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <vTaskDelay+0x42>
		{
			portYIELD_WITHIN_API();
 800122a:	f001 fa9d 	bl	8002768 <vPortYield>
		}
	}
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000560 	.word	0x20000560
 8001238:	20000484 	.word	0x20000484

0800123c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8001242:	2300      	movs	r3, #0
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2300      	movs	r3, #0
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	2300      	movs	r3, #0
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2300      	movs	r3, #0
 8001250:	9303      	str	r3, [sp, #12]
 8001252:	4812      	ldr	r0, [pc, #72]	; (800129c <vTaskStartScheduler+0x60>)
 8001254:	4912      	ldr	r1, [pc, #72]	; (80012a0 <vTaskStartScheduler+0x64>)
 8001256:	2282      	movs	r2, #130	; 0x82
 8001258:	2300      	movs	r3, #0
 800125a:	f7ff fe75 	bl	8000f48 <xTaskGenericCreate>
 800125e:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
 8001266:	f001 fb4b 	bl	8002900 <xTimerCreateTimerTask>
 800126a:	6078      	str	r0, [r7, #4]
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10a      	bne.n	8001288 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001272:	f001 faab 	bl	80027cc <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <vTaskStartScheduler+0x68>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <vTaskStartScheduler+0x6c>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001282:	f001 fa0b 	bl	800269c <xPortStartScheduler>
 8001286:	e005      	b.n	8001294 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <vTaskStartScheduler+0x58>
 800128e:	f001 fa9d 	bl	80027cc <ulPortSetInterruptMask>
 8001292:	e7fe      	b.n	8001292 <vTaskStartScheduler+0x56>
	}
}
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	080018f9 	.word	0x080018f9
 80012a0:	080041a8 	.word	0x080041a8
 80012a4:	20000568 	.word	0x20000568
 80012a8:	20000560 	.word	0x20000560

080012ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <vTaskSuspendAll+0x18>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <vTaskSuspendAll+0x18>)
 80012b8:	601a      	str	r2, [r3, #0]
}
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	2000056c 	.word	0x2000056c

080012c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
tskTCB *pxTCB;
portBASE_TYPE xAlreadyYielded = pdFALSE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80012d2:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <xTaskResumeAll+0xec>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <xTaskResumeAll+0x18>
 80012da:	f001 fa77 	bl	80027cc <ulPortSetInterruptMask>
 80012de:	e7fe      	b.n	80012de <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80012e0:	f001 fa52 	bl	8002788 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80012e4:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <xTaskResumeAll+0xec>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	1e5a      	subs	r2, r3, #1
 80012ea:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <xTaskResumeAll+0xec>)
 80012ec:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80012ee:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <xTaskResumeAll+0xec>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d156      	bne.n	80013a4 <xTaskResumeAll+0xdc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 80012f6:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <xTaskResumeAll+0xf0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d052      	beq.n	80013a4 <xTaskResumeAll+0xdc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80012fe:	e02f      	b.n	8001360 <xTaskResumeAll+0x98>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <xTaskResumeAll+0xf4>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	3318      	adds	r3, #24
 800130c:	4618      	mov	r0, r3
 800130e:	f001 f941 	bl	8002594 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	3304      	adds	r3, #4
 8001316:	4618      	mov	r0, r3
 8001318:	f001 f93c 	bl	8002594 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <xTaskResumeAll+0xf8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d903      	bls.n	8001330 <xTaskResumeAll+0x68>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <xTaskResumeAll+0xf8>)
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <xTaskResumeAll+0xfc>)
 800133e:	441a      	add	r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	3304      	adds	r3, #4
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f001 f8c8 	bl	80024dc <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <xTaskResumeAll+0x100>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	429a      	cmp	r2, r3
 8001358:	d302      	bcc.n	8001360 <xTaskResumeAll+0x98>
					{
						xYieldPending = pdTRUE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <xTaskResumeAll+0x104>)
 800135c:	2201      	movs	r2, #1
 800135e:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001360:	4b16      	ldr	r3, [pc, #88]	; (80013bc <xTaskResumeAll+0xf4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1cb      	bne.n	8001300 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <xTaskResumeAll+0x108>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d011      	beq.n	8001394 <xTaskResumeAll+0xcc>
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 8001370:	e00c      	b.n	800138c <xTaskResumeAll+0xc4>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8001372:	f000 f841 	bl	80013f8 <xTaskIncrementTick>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <xTaskResumeAll+0xba>
						{
							xYieldPending = pdTRUE;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <xTaskResumeAll+0x104>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
						}
						--uxPendedTicks;
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <xTaskResumeAll+0x108>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	1e5a      	subs	r2, r3, #1
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <xTaskResumeAll+0x108>)
 800138a:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxPendedTicks > ( unsigned portBASE_TYPE ) 0U )
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <xTaskResumeAll+0x108>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1ee      	bne.n	8001372 <xTaskResumeAll+0xaa>
						}
						--uxPendedTicks;
					}
				}

				if( xYieldPending == pdTRUE )
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <xTaskResumeAll+0x104>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d103      	bne.n	80013a4 <xTaskResumeAll+0xdc>
				{
					xAlreadyYielded = pdTRUE;
 800139c:	2301      	movs	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
					portYIELD_WITHIN_API();
 80013a0:	f001 f9e2 	bl	8002768 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 80013a4:	f001 fa00 	bl	80027a8 <vPortExitCritical>

	return xAlreadyYielded;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000056c 	.word	0x2000056c
 80013b8:	2000055c 	.word	0x2000055c
 80013bc:	2000051c 	.word	0x2000051c
 80013c0:	20000564 	.word	0x20000564
 80013c4:	20000488 	.word	0x20000488
 80013c8:	20000484 	.word	0x20000484
 80013cc:	20000574 	.word	0x20000574
 80013d0:	20000570 	.word	0x20000570

080013d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCount( void )
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 80013da:	f001 f9d5 	bl	8002788 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <xTaskGetTickCount+0x20>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
 80013e4:	f001 f9e0 	bl	80027a8 <vPortExitCritical>

	return xTicks;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000560 	.word	0x20000560

080013f8 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

portBASE_TYPE xTaskIncrementTick( void )
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
tskTCB * pxTCB;
portTickType xItemValue;
portBASE_TYPE xSwitchRequired = pdFALSE;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <xTaskIncrementTick+0x180>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f040 80a4 	bne.w	8001554 <xTaskIncrementTick+0x15c>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <xTaskIncrementTick+0x184>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	4b5a      	ldr	r3, [pc, #360]	; (800157c <xTaskIncrementTick+0x184>)
 8001414:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const portTickType xConstTickCount = xTickCount;
 8001416:	4b59      	ldr	r3, [pc, #356]	; (800157c <xTaskIncrementTick+0x184>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( portTickType ) 0U )
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d12e      	bne.n	8001480 <xTaskIncrementTick+0x88>
			{
				taskSWITCH_DELAYED_LISTS();
 8001422:	4b57      	ldr	r3, [pc, #348]	; (8001580 <xTaskIncrementTick+0x188>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <xTaskIncrementTick+0x3a>
 800142c:	f001 f9ce 	bl	80027cc <ulPortSetInterruptMask>
 8001430:	e7fe      	b.n	8001430 <xTaskIncrementTick+0x38>
 8001432:	4b53      	ldr	r3, [pc, #332]	; (8001580 <xTaskIncrementTick+0x188>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4b52      	ldr	r3, [pc, #328]	; (8001584 <xTaskIncrementTick+0x18c>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b50      	ldr	r3, [pc, #320]	; (8001580 <xTaskIncrementTick+0x188>)
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <xTaskIncrementTick+0x18c>)
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	4b50      	ldr	r3, [pc, #320]	; (8001588 <xTaskIncrementTick+0x190>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	4b4e      	ldr	r3, [pc, #312]	; (8001588 <xTaskIncrementTick+0x190>)
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <xTaskIncrementTick+0x188>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <xTaskIncrementTick+0x66>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <xTaskIncrementTick+0x68>
 800145e:	2300      	movs	r3, #0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <xTaskIncrementTick+0x76>
 8001464:	4b49      	ldr	r3, [pc, #292]	; (800158c <xTaskIncrementTick+0x194>)
 8001466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	e008      	b.n	8001480 <xTaskIncrementTick+0x88>
 800146e:	4b44      	ldr	r3, [pc, #272]	; (8001580 <xTaskIncrementTick+0x188>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <xTaskIncrementTick+0x194>)
 800147e:	601a      	str	r2, [r3, #0]

			/* See if this tick has made a timeout expire.  Tasks are stored in the
			queue in the order of their wake time - meaning once one tasks has been
			found whose block time has not expired there is no need not look any
			further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001480:	4b42      	ldr	r3, [pc, #264]	; (800158c <xTaskIncrementTick+0x194>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	429a      	cmp	r2, r3
 8001488:	d34f      	bcc.n	800152a <xTaskIncrementTick+0x132>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <xTaskIncrementTick+0x188>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <xTaskIncrementTick+0xa0>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <xTaskIncrementTick+0xa2>
 8001498:	2300      	movs	r3, #0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d004      	beq.n	80014a8 <xTaskIncrementTick+0xb0>
					{
						/* The delayed list is empty.  Set xNextTaskUnblockTime to
						the	maximum possible value so it is extremely unlikely that
						the if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <xTaskIncrementTick+0x194>)
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014a4:	601a      	str	r2, [r3, #0]
						break;
 80014a6:	e040      	b.n	800152a <xTaskIncrementTick+0x132>
					{
						/* The delayed list is not empty, get the value of the item
						at the head of the delayed list.  This is the time at which
						the task at the head of the delayed list must be removed
						from the Blocked state. */
						pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80014a8:	4b35      	ldr	r3, [pc, #212]	; (8001580 <xTaskIncrementTick+0x188>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d203      	bcs.n	80014c8 <xTaskIncrementTick+0xd0>
						{
							/* It is not time to unblock this item yet, but the item
							value is the time at which the task at the head of the
							blocked list must be removed from the Blocked state -
							so record the item value in xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <xTaskIncrementTick+0x194>)
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	601a      	str	r2, [r3, #0]
							break;
 80014c6:	e030      	b.n	800152a <xTaskIncrementTick+0x132>
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	3304      	adds	r3, #4
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 f861 	bl	8002594 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove it
						from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <xTaskIncrementTick+0xec>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	3318      	adds	r3, #24
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 f858 	bl	8002594 <uxListRemove>
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <xTaskIncrementTick+0x198>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d903      	bls.n	80014f8 <xTaskIncrementTick+0x100>
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <xTaskIncrementTick+0x198>)
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4a23      	ldr	r2, [pc, #140]	; (8001594 <xTaskIncrementTick+0x19c>)
 8001506:	441a      	add	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	3304      	adds	r3, #4
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f000 ffe4 	bl	80024dc <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should only
							be performed if the unblocked task has a priority that
							is equal to or higher than the currently executing
							task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <xTaskIncrementTick+0x1a0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	429a      	cmp	r2, r3
 8001520:	d302      	bcc.n	8001528 <xTaskIncrementTick+0x130>
							{
								xSwitchRequired = pdTRUE;
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8001526:	e7b0      	b.n	800148a <xTaskIncrementTick+0x92>
 8001528:	e7af      	b.n	800148a <xTaskIncrementTick+0x92>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <xTaskIncrementTick+0x1a0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001530:	4918      	ldr	r1, [pc, #96]	; (8001594 <xTaskIncrementTick+0x19c>)
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d901      	bls.n	8001546 <xTaskIncrementTick+0x14e>
			{
				xSwitchRequired = pdTRUE;
 8001542:	2301      	movs	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
		
		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( unsigned portBASE_TYPE ) 0U )
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <xTaskIncrementTick+0x1a4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <xTaskIncrementTick+0x16a>
			{
				vApplicationTickHook();
 800154e:	f7ff fb73 	bl	8000c38 <vApplicationTickHook>
 8001552:	e006      	b.n	8001562 <xTaskIncrementTick+0x16a>
		}
		#endif /* configUSE_TICK_HOOK */		
	}
	else
	{
		++uxPendedTicks;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <xTaskIncrementTick+0x1a4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <xTaskIncrementTick+0x1a4>)
 800155c:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800155e:	f7ff fb6b 	bl	8000c38 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <xTaskIncrementTick+0x1a8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <xTaskIncrementTick+0x176>
		{
			xSwitchRequired = pdTRUE;
 800156a:	2301      	movs	r3, #1
 800156c:	617b      	str	r3, [r7, #20]
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800156e:	697b      	ldr	r3, [r7, #20]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000056c 	.word	0x2000056c
 800157c:	20000560 	.word	0x20000560
 8001580:	20000514 	.word	0x20000514
 8001584:	20000518 	.word	0x20000518
 8001588:	20000578 	.word	0x20000578
 800158c:	20000004 	.word	0x20000004
 8001590:	20000564 	.word	0x20000564
 8001594:	20000488 	.word	0x20000488
 8001598:	20000484 	.word	0x20000484
 800159c:	20000570 	.word	0x20000570
 80015a0:	20000574 	.word	0x20000574

080015a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <vTaskSwitchContext+0xdc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80015b2:	4b34      	ldr	r3, [pc, #208]	; (8001684 <vTaskSwitchContext+0xe0>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e05e      	b.n	8001678 <vTaskSwitchContext+0xd4>
	}
	else
	{
		xYieldPending = pdFALSE;
 80015ba:	4b32      	ldr	r3, [pc, #200]	; (8001684 <vTaskSwitchContext+0xe0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <vTaskSwitchContext+0xe4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <vTaskSwitchContext+0xe4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d808      	bhi.n	80015e2 <vTaskSwitchContext+0x3e>
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <vTaskSwitchContext+0xe4>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <vTaskSwitchContext+0xe4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3334      	adds	r3, #52	; 0x34
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fb99 	bl	8000d14 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 80015e2:	4b29      	ldr	r3, [pc, #164]	; (8001688 <vTaskSwitchContext+0xe4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	4618      	mov	r0, r3
 80015ea:	4928      	ldr	r1, [pc, #160]	; (800168c <vTaskSwitchContext+0xe8>)
 80015ec:	2214      	movs	r2, #20
 80015ee:	f002 fccb 	bl	8003f88 <memcmp>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d009      	beq.n	800160c <vTaskSwitchContext+0x68>
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <vTaskSwitchContext+0xe4>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <vTaskSwitchContext+0xe4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3334      	adds	r3, #52	; 0x34
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fb85 	bl	8000d14 <vApplicationStackOverflowHook>

		taskSELECT_HIGHEST_PRIORITY_TASK();
 800160a:	e00c      	b.n	8001626 <vTaskSwitchContext+0x82>
 800160c:	e00b      	b.n	8001626 <vTaskSwitchContext+0x82>
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <vTaskSwitchContext+0xec>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d102      	bne.n	800161c <vTaskSwitchContext+0x78>
 8001616:	f001 f8d9 	bl	80027cc <ulPortSetInterruptMask>
 800161a:	e7fe      	b.n	800161a <vTaskSwitchContext+0x76>
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <vTaskSwitchContext+0xec>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <vTaskSwitchContext+0xec>)
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <vTaskSwitchContext+0xec>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	491a      	ldr	r1, [pc, #104]	; (8001694 <vTaskSwitchContext+0xf0>)
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0e8      	beq.n	800160e <vTaskSwitchContext+0x6a>
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <vTaskSwitchContext+0xec>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <vTaskSwitchContext+0xf0>)
 800164a:	4413      	add	r3, r2
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3308      	adds	r3, #8
 8001660:	429a      	cmp	r2, r3
 8001662:	d104      	bne.n	800166e <vTaskSwitchContext+0xca>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	4b04      	ldr	r3, [pc, #16]	; (8001688 <vTaskSwitchContext+0xe4>)
 8001676:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	2000056c 	.word	0x2000056c
 8001684:	20000574 	.word	0x20000574
 8001688:	20000484 	.word	0x20000484
 800168c:	08004550 	.word	0x08004550
 8001690:	20000564 	.word	0x20000564
 8001694:	20000488 	.word	0x20000488

08001698 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( xList * const pxEventList, portTickType xTicksToWait )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	configASSERT( pxEventList );
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <vTaskPlaceOnEventList+0x16>
 80016a8:	f001 f890 	bl	80027cc <ulPortSetInterruptMask>
 80016ac:	e7fe      	b.n	80016ac <vTaskPlaceOnEventList+0x14>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <vTaskPlaceOnEventList+0x60>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3318      	adds	r3, #24
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4619      	mov	r1, r3
 80016b8:	f000 ff34 	bl	8002524 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <vTaskPlaceOnEventList+0x60>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3304      	adds	r3, #4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 ff66 	bl	8002594 <uxListRemove>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016ce:	d107      	bne.n	80016e0 <vTaskPlaceOnEventList+0x48>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <vTaskPlaceOnEventList+0x60>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3304      	adds	r3, #4
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <vTaskPlaceOnEventList+0x64>)
 80016d8:	4619      	mov	r1, r3
 80016da:	f000 feff 	bl	80024dc <vListInsertEnd>
 80016de:	e007      	b.n	80016f0 <vTaskPlaceOnEventList+0x58>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <vTaskPlaceOnEventList+0x68>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f9d6 	bl	8001a9c <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000484 	.word	0x20000484
 80016fc:	20000548 	.word	0x20000548
 8001700:	20000560 	.word	0x20000560

08001704 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( xList * const pxEventList, portTickType xTicksToWait )
	{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;

		configASSERT( pxEventList );
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <vTaskPlaceOnEventListRestricted+0x16>
 8001714:	f001 f85a 	bl	80027cc <ulPortSetInterruptMask>
 8001718:	e7fe      	b.n	8001718 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <vTaskPlaceOnEventListRestricted+0x48>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3318      	adds	r3, #24
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4619      	mov	r1, r3
 8001724:	f000 feda 	bl	80024dc <vListInsertEnd>

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <vTaskPlaceOnEventListRestricted+0x48>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3304      	adds	r3, #4
 800172e:	4618      	mov	r0, r3
 8001730:	f000 ff30 	bl	8002594 <uxListRemove>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <vTaskPlaceOnEventListRestricted+0x4c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 f9ac 	bl	8001a9c <prvAddCurrentTaskToDelayedList>
	}
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000484 	.word	0x20000484
 8001750:	20000560 	.word	0x20000560

08001754 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <xTaskRemoveFromEventList+0x1c>
 800176a:	f001 f82f 	bl	80027cc <ulPortSetInterruptMask>
 800176e:	e7fe      	b.n	800176e <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	3318      	adds	r3, #24
 8001774:	4618      	mov	r0, r3
 8001776:	f000 ff0d 	bl	8002594 <uxListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <xTaskRemoveFromEventList+0xa0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d11d      	bne.n	80017be <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	3304      	adds	r3, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f000 ff04 	bl	8002594 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <xTaskRemoveFromEventList+0xa4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d903      	bls.n	80017a0 <xTaskRemoveFromEventList+0x4c>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179c:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <xTaskRemoveFromEventList+0xa4>)
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4a13      	ldr	r2, [pc, #76]	; (80017fc <xTaskRemoveFromEventList+0xa8>)
 80017ae:	441a      	add	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3304      	adds	r3, #4
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f000 fe90 	bl	80024dc <vListInsertEnd>
 80017bc:	e005      	b.n	80017ca <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3318      	adds	r3, #24
 80017c2:	480f      	ldr	r0, [pc, #60]	; (8001800 <xTaskRemoveFromEventList+0xac>)
 80017c4:	4619      	mov	r1, r3
 80017c6:	f000 fe89 	bl	80024dc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <xTaskRemoveFromEventList+0xb0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d305      	bcc.n	80017e4 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 80017d8:	2301      	movs	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <xTaskRemoveFromEventList+0xb4>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	e001      	b.n	80017e8 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000056c 	.word	0x2000056c
 80017f8:	20000564 	.word	0x20000564
 80017fc:	20000488 	.word	0x20000488
 8001800:	2000051c 	.word	0x2000051c
 8001804:	20000484 	.word	0x20000484
 8001808:	20000574 	.word	0x20000574

0800180c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <vTaskSetTimeOutState+0x14>
 800181a:	f000 ffd7 	bl	80027cc <ulPortSetInterruptMask>
 800181e:	e7fe      	b.n	800181e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <vTaskSetTimeOutState+0x2c>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <vTaskSetTimeOutState+0x30>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	605a      	str	r2, [r3, #4]
}
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000578 	.word	0x20000578
 800183c:	20000560 	.word	0x20000560

08001840 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <xTaskCheckForTimeOut+0x16>
 8001850:	f000 ffbc 	bl	80027cc <ulPortSetInterruptMask>
 8001854:	e7fe      	b.n	8001854 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <xTaskCheckForTimeOut+0x22>
 800185c:	f000 ffb6 	bl	80027cc <ulPortSetInterruptMask>
 8001860:	e7fe      	b.n	8001860 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 8001862:	f000 ff91 	bl	8002788 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const portTickType xConstTickCount = xTickCount;
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <xTaskCheckForTimeOut+0x98>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001874:	d102      	bne.n	800187c <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	e026      	b.n	80018ca <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <xTaskCheckForTimeOut+0x9c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d007      	beq.n	8001898 <xTaskCheckForTimeOut+0x58>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	429a      	cmp	r2, r3
 8001890:	d802      	bhi.n	8001898 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8001892:	2301      	movs	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e018      	b.n	80018ca <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	1ad2      	subs	r2, r2, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d20e      	bcs.n	80018c6 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	1acb      	subs	r3, r1, r3
 80018b4:	441a      	add	r2, r3
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffa6 	bl	800180c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e001      	b.n	80018ca <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
 80018c6:	2301      	movs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80018ca:	f000 ff6d 	bl	80027a8 <vPortExitCritical>

	return xReturn;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000560 	.word	0x20000560
 80018dc:	20000578 	.word	0x20000578

080018e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <vTaskMissedYield+0x14>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
}
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000574 	.word	0x20000574

080018f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8001900:	f000 f892 	bl	8001a28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <prvIdleTask+0x20>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d901      	bls.n	8001910 <prvIdleTask+0x18>
			{
				taskYIELD();
 800190c:	f000 ff2c 	bl	8002768 <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001910:	f7ff f9fa 	bl	8000d08 <vApplicationIdleHook>
				}
				( void ) xTaskResumeAll();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8001914:	e7f4      	b.n	8001900 <prvIdleTask+0x8>
 8001916:	bf00      	nop
 8001918:	20000488 	.word	0x20000488

0800191c <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	603b      	str	r3, [r7, #0]
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e012      	b.n	8001956 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	4413      	add	r3, r2
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	440b      	add	r3, r1
 800193e:	3330      	adds	r3, #48	; 0x30
 8001940:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d100      	bne.n	8001950 <prvInitialiseTCBVariables+0x34>
		{
			break;
 800194e:	e005      	b.n	800195c <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
unsigned portBASE_TYPE x;

	/* Store the task name in the TCB. */
	for( x = ( unsigned portBASE_TYPE ) 0; x < ( unsigned portBASE_TYPE ) configMAX_TASK_NAME_LEN; x++ )
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2b09      	cmp	r3, #9
 800195a:	d9e9      	bls.n	8001930 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = ( signed char ) '\0';
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( unsigned portBASE_TYPE ) configMAX_PRIORITIES )
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b04      	cmp	r3, #4
 8001968:	d901      	bls.n	800196e <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( unsigned portBASE_TYPE ) configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 800196a:	2304      	movs	r3, #4
 800196c:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3304      	adds	r3, #4
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fda0 	bl	80024c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3318      	adds	r3, #24
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fd9b 	bl	80024c4 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f1c3 0205 	rsb	r2, r3, #5
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop

080019ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	e00c      	b.n	80019d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <prvInitialiseTaskLists+0x5c>)
 80019c4:	4413      	add	r3, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fd5c 	bl	8002484 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < ( unsigned portBASE_TYPE ) configMAX_PRIORITIES; uxPriority++ )
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3301      	adds	r3, #1
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d9ef      	bls.n	80019b8 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <prvInitialiseTaskLists+0x60>)
 80019da:	f000 fd53 	bl	8002484 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80019de:	480c      	ldr	r0, [pc, #48]	; (8001a10 <prvInitialiseTaskLists+0x64>)
 80019e0:	f000 fd50 	bl	8002484 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80019e4:	480b      	ldr	r0, [pc, #44]	; (8001a14 <prvInitialiseTaskLists+0x68>)
 80019e6:	f000 fd4d 	bl	8002484 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80019ea:	480b      	ldr	r0, [pc, #44]	; (8001a18 <prvInitialiseTaskLists+0x6c>)
 80019ec:	f000 fd4a 	bl	8002484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80019f0:	480a      	ldr	r0, [pc, #40]	; (8001a1c <prvInitialiseTaskLists+0x70>)
 80019f2:	f000 fd47 	bl	8002484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <prvInitialiseTaskLists+0x74>)
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <prvInitialiseTaskLists+0x60>)
 80019fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <prvInitialiseTaskLists+0x78>)
 80019fe:	4a04      	ldr	r2, [pc, #16]	; (8001a10 <prvInitialiseTaskLists+0x64>)
 8001a00:	601a      	str	r2, [r3, #0]
}
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000488 	.word	0x20000488
 8001a0c:	200004ec 	.word	0x200004ec
 8001a10:	20000500 	.word	0x20000500
 8001a14:	2000051c 	.word	0x2000051c
 8001a18:	20000530 	.word	0x20000530
 8001a1c:	20000548 	.word	0x20000548
 8001a20:	20000514 	.word	0x20000514
 8001a24:	20000518 	.word	0x20000518

08001a28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001a2e:	e028      	b.n	8001a82 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001a30:	f7ff fc3c 	bl	80012ac <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <prvCheckTasksWaitingTermination+0x68>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2300      	movne	r3, #0
 8001a3e:	2301      	moveq	r3, #1
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	607b      	str	r3, [r7, #4]
			( void ) xTaskResumeAll();
 8001a44:	f7ff fc40 	bl	80012c8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d119      	bne.n	8001a82 <prvCheckTasksWaitingTermination+0x5a>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 8001a4e:	f000 fe9b 	bl	8002788 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <prvCheckTasksWaitingTermination+0x68>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 fd98 	bl	8002594 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <prvCheckTasksWaitingTermination+0x6c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <prvCheckTasksWaitingTermination+0x6c>)
 8001a6c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <prvCheckTasksWaitingTermination+0x70>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	1e5a      	subs	r2, r3, #1
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <prvCheckTasksWaitingTermination+0x70>)
 8001a76:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 8001a78:	f000 fe96 	bl	80027a8 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001a7c:	6838      	ldr	r0, [r7, #0]
 8001a7e:	f000 f875 	bl	8001b6c <prvDeleteTCB>
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <prvCheckTasksWaitingTermination+0x70>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1d2      	bne.n	8001a30 <prvCheckTasksWaitingTermination+0x8>
				prvDeleteTCB( pxTCB );
			}
		}
	}
	#endif /* vTaskDelete */
}
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000530 	.word	0x20000530
 8001a94:	2000055c 	.word	0x2000055c
 8001a98:	20000544 	.word	0x20000544

08001a9c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <prvAddCurrentTaskToDelayedList+0x58>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <prvAddCurrentTaskToDelayedList+0x5c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d209      	bcs.n	8001aca <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <prvAddCurrentTaskToDelayedList+0x60>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <prvAddCurrentTaskToDelayedList+0x58>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f000 fd2e 	bl	8002524 <vListInsert>
 8001ac8:	e010      	b.n	8001aec <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <prvAddCurrentTaskToDelayedList+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <prvAddCurrentTaskToDelayedList+0x58>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f000 fd24 	bl	8002524 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <prvAddCurrentTaskToDelayedList+0x68>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d202      	bcs.n	8001aec <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <prvAddCurrentTaskToDelayedList+0x68>)
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000484 	.word	0x20000484
 8001af8:	20000560 	.word	0x20000560
 8001afc:	20000518 	.word	0x20000518
 8001b00:	20000514 	.word	0x20000514
 8001b04:	20000004 	.word	0x20000004

08001b08 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8001b14:	204c      	movs	r0, #76	; 0x4c
 8001b16:	f001 f969 	bl	8002dec <pvPortMalloc>
 8001b1a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d01f      	beq.n	8001b62 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d106      	bne.n	8001b36 <prvAllocateTCBAndStack+0x2e>
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 f95d 	bl	8002dec <pvPortMalloc>
 8001b32:	4603      	mov	r3, r0
 8001b34:	e000      	b.n	8001b38 <prvAllocateTCBAndStack+0x30>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f001 f99d 	bl	8002e84 <vPortFree>
			pxNewTCB = NULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	e008      	b.n	8001b62 <prvAllocateTCBAndStack+0x5a>
		}
		else
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4610      	mov	r0, r2
 8001b5a:	21a5      	movs	r1, #165	; 0xa5
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f002 fa47 	bl	8003ff0 <memset>
		}
	}

	return pxNewTCB;
 8001b62:	68fb      	ldr	r3, [r7, #12]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 f983 	bl	8002e84 <vPortFree>
		vPortFree( pxTCB );
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f001 f980 	bl	8002e84 <vPortFree>
	}
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop

08001b8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <xTaskGetCurrentTaskHandle+0x1c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	607b      	str	r3, [r7, #4]

		return xReturn;
 8001b98:	687b      	ldr	r3, [r7, #4]
	}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000484 	.word	0x20000484

08001bac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <xTaskGetSchedulerState+0x34>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	e008      	b.n	8001bd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <xTaskGetSchedulerState+0x38>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	e001      	b.n	8001bd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001bd2:	687b      	ldr	r3, [r7, #4]
	}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	20000568 	.word	0x20000568
 8001be4:	2000056c 	.word	0x2000056c

08001be8 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle const pxMutexHolder )
	{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d046      	beq.n	8001c88 <vTaskPriorityInherit+0xa0>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <vTaskPriorityInherit+0xa8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d23f      	bcs.n	8001c88 <vTaskPriorityInherit+0xa0>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c08:	4b21      	ldr	r3, [pc, #132]	; (8001c90 <vTaskPriorityInherit+0xa8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	f1c3 0205 	rsb	r2, r3, #5
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	619a      	str	r2, [r3, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6959      	ldr	r1, [r3, #20]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4a1b      	ldr	r2, [pc, #108]	; (8001c94 <vTaskPriorityInherit+0xac>)
 8001c28:	4413      	add	r3, r2
 8001c2a:	4299      	cmp	r1, r3
 8001c2c:	d101      	bne.n	8001c32 <vTaskPriorityInherit+0x4a>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <vTaskPriorityInherit+0x4c>
 8001c32:	2300      	movs	r3, #0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d022      	beq.n	8001c7e <vTaskPriorityInherit+0x96>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fca9 	bl	8002594 <uxListRemove>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <vTaskPriorityInherit+0xa8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <vTaskPriorityInherit+0xb0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d903      	bls.n	8001c60 <vTaskPriorityInherit+0x78>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <vTaskPriorityInherit+0xb0>)
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <vTaskPriorityInherit+0xac>)
 8001c6e:	441a      	add	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3304      	adds	r3, #4
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f000 fc30 	bl	80024dc <vListInsertEnd>
 8001c7c:	e004      	b.n	8001c88 <vTaskPriorityInherit+0xa0>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <vTaskPriorityInherit+0xa8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
			}
		}
	}
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000484 	.word	0x20000484
 8001c94:	20000488 	.word	0x20000488
 8001c98:	20000564 	.word	0x20000564

08001c9c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle const pxMutexHolder )
	{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d02c      	beq.n	8001d08 <vTaskPriorityDisinherit+0x6c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d026      	beq.n	8001d08 <vTaskPriorityDisinherit+0x6c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( unsigned portBASE_TYPE ) 0 )
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 fc68 	bl	8002594 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( portTickType ) configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	f1c3 0205 	rsb	r2, r3, #5
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList( pxTCB );
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <vTaskPriorityDisinherit+0x74>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d903      	bls.n	8001cec <vTaskPriorityDisinherit+0x50>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <vTaskPriorityDisinherit+0x74>)
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <vTaskPriorityDisinherit+0x78>)
 8001cfa:	441a      	add	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f000 fbea 	bl	80024dc <vListInsertEnd>
			}
		}
	}
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000564 	.word	0x20000564
 8001d14:	20000488 	.word	0x20000488

08001d18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle xQueue, portBASE_TYPE xNewQueue )
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <xQueueGenericReset+0x1a>
 8001d2c:	f000 fd4e 	bl	80027cc <ulPortSetInterruptMask>
 8001d30:	e7fe      	b.n	8001d30 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 8001d32:	f000 fd29 	bl	8002788 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3e:	68f9      	ldr	r1, [r7, #12]
 8001d40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	441a      	add	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d62:	3b01      	subs	r3, #1
 8001d64:	68f9      	ldr	r1, [r7, #12]
 8001d66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	441a      	add	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d80:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10e      	bne.n	8001da6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d014      	beq.n	8001dba <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3310      	adds	r3, #16
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fcdd 	bl	8001754 <xTaskRemoveFromEventList>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10c      	bne.n	8001dba <xQueueGenericReset+0xa2>
				{
					portYIELD_WITHIN_API();
 8001da0:	f000 fce2 	bl	8002768 <vPortYield>
 8001da4:	e009      	b.n	8001dba <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3310      	adds	r3, #16
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fb6a 	bl	8002484 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3324      	adds	r3, #36	; 0x24
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fb65 	bl	8002484 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001dba:	f000 fcf5 	bl	80027a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d02a      	beq.n	8001e36 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8001de0:	2050      	movs	r0, #80	; 0x50
 8001de2:	f001 f803 	bl	8002dec <pvPortMalloc>
 8001de6:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d023      	beq.n	8001e36 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
 8001dfa:	6978      	ldr	r0, [r7, #20]
 8001dfc:	f000 fff6 	bl	8002dec <pvPortMalloc>
 8001e00:	4602      	mov	r2, r0
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d010      	beq.n	8001e30 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001e1a:	69b8      	ldr	r0, [r7, #24]
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	f7ff ff7b 	bl	8001d18 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	79fa      	ldrb	r2, [r7, #7]
 8001e26:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	61fb      	str	r3, [r7, #28]
 8001e2e:	e002      	b.n	8001e36 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 8001e30:	69b8      	ldr	r0, [r7, #24]
 8001e32:	f001 f827 	bl	8002e84 <vPortFree>
			}
		}
	}

	configASSERT( xReturn );
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <xQueueGenericCreate+0x7a>
 8001e3c:	f000 fcc6 	bl	80027cc <ulPortSetInterruptMask>
 8001e40:	e7fe      	b.n	8001e40 <xQueueGenericCreate+0x78>

	return xReturn;
 8001e42:	69fb      	ldr	r3, [r7, #28]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle xQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
xTimeOutType xTimeOut;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <xQueueGenericSend+0x22>
 8001e68:	f000 fcb0 	bl	80027cc <ulPortSetInterruptMask>
 8001e6c:	e7fe      	b.n	8001e6c <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d103      	bne.n	8001e7c <xQueueGenericSend+0x30>
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <xQueueGenericSend+0x34>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <xQueueGenericSend+0x36>
 8001e80:	2300      	movs	r3, #0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <xQueueGenericSend+0x40>
 8001e86:	f000 fca1 	bl	80027cc <ulPortSetInterruptMask>
 8001e8a:	e7fe      	b.n	8001e8a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d103      	bne.n	8001e9a <xQueueGenericSend+0x4e>
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <xQueueGenericSend+0x52>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <xQueueGenericSend+0x54>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <xQueueGenericSend+0x5e>
 8001ea4:	f000 fc92 	bl	80027cc <ulPortSetInterruptMask>
 8001ea8:	e7fe      	b.n	8001ea8 <xQueueGenericSend+0x5c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001eaa:	f000 fc6d 	bl	8002788 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d302      	bcc.n	8001ec0 <xQueueGenericSend+0x74>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d116      	bne.n	8001eee <xQueueGenericSend+0xa2>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ec0:	69b8      	ldr	r0, [r7, #24]
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	f000 f9a9 	bl	800221c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d009      	beq.n	8001ee6 <xQueueGenericSend+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	3324      	adds	r3, #36	; 0x24
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fc3c 	bl	8001754 <xTaskRemoveFromEventList>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <xQueueGenericSend+0x9a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							portYIELD_WITHIN_API();
 8001ee2:	f000 fc41 	bl	8002768 <vPortYield>
						}
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ee6:	f000 fc5f 	bl	80027a8 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e059      	b.n	8001fa2 <xQueueGenericSend+0x156>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d103      	bne.n	8001efc <xQueueGenericSend+0xb0>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001ef4:	f000 fc58 	bl	80027a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e052      	b.n	8001fa2 <xQueueGenericSend+0x156>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fc80 	bl	800180c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f10:	f000 fc4a 	bl	80027a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f14:	f7ff f9ca 	bl	80012ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f18:	f000 fc36 	bl	8002788 <vPortEnterCritical>
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f24:	d102      	bne.n	8001f2c <xQueueGenericSend+0xe0>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f34:	d102      	bne.n	8001f3c <xQueueGenericSend+0xf0>
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	649a      	str	r2, [r3, #72]	; 0x48
 8001f3c:	f000 fc34 	bl	80027a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f40:	f107 0210 	add.w	r2, r7, #16
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7ff fc79 	bl	8001840 <xTaskCheckForTimeOut>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d11e      	bne.n	8001f92 <xQueueGenericSend+0x146>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f54:	69b8      	ldr	r0, [r7, #24]
 8001f56:	f000 fa51 	bl	80023fc <prvIsQueueFull>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d012      	beq.n	8001f86 <xQueueGenericSend+0x13a>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	f103 0210 	add.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7ff fb94 	bl	8001698 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f70:	69b8      	ldr	r0, [r7, #24]
 8001f72:	f000 f9e1 	bl	8002338 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f76:	f7ff f9a7 	bl	80012c8 <xTaskResumeAll>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10f      	bne.n	8001fa0 <xQueueGenericSend+0x154>
				{
					portYIELD_WITHIN_API();
 8001f80:	f000 fbf2 	bl	8002768 <vPortYield>
 8001f84:	e00c      	b.n	8001fa0 <xQueueGenericSend+0x154>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001f86:	69b8      	ldr	r0, [r7, #24]
 8001f88:	f000 f9d6 	bl	8002338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001f8c:	f7ff f99c 	bl	80012c8 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 8001f90:	e78b      	b.n	8001eaa <xQueueGenericSend+0x5e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001f92:	69b8      	ldr	r0, [r7, #24]
 8001f94:	f000 f9d0 	bl	8002338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001f98:	f7ff f996 	bl	80012c8 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <xQueueGenericSend+0x156>
		}
	}
 8001fa0:	e783      	b.n	8001eaa <xQueueGenericSend+0x5e>
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3720      	adds	r7, #32
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop

08001fac <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle xQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <xQueueGenericSendFromISR+0x1e>
 8001fc4:	f000 fc02 	bl	80027cc <ulPortSetInterruptMask>
 8001fc8:	e7fe      	b.n	8001fc8 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d103      	bne.n	8001fd8 <xQueueGenericSendFromISR+0x2c>
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <xQueueGenericSendFromISR+0x30>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <xQueueGenericSendFromISR+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <xQueueGenericSendFromISR+0x3c>
 8001fe2:	f000 fbf3 	bl	80027cc <ulPortSetInterruptMask>
 8001fe6:	e7fe      	b.n	8001fe6 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d103      	bne.n	8001ff6 <xQueueGenericSendFromISR+0x4a>
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <xQueueGenericSendFromISR+0x4e>
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e000      	b.n	8001ffc <xQueueGenericSendFromISR+0x50>
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <xQueueGenericSendFromISR+0x5a>
 8002000:	f000 fbe4 	bl	80027cc <ulPortSetInterruptMask>
 8002004:	e7fe      	b.n	8002004 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002006:	f000 fc4f 	bl	80028a8 <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800200a:	f000 fbdf 	bl	80027cc <ulPortSetInterruptMask>
 800200e:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002018:	429a      	cmp	r2, r3
 800201a:	d302      	bcc.n	8002022 <xQueueGenericSendFromISR+0x76>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d124      	bne.n	800206c <xQueueGenericSendFromISR+0xc0>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002022:	69b8      	ldr	r0, [r7, #24]
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	f000 f8f8 	bl	800221c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002034:	d112      	bne.n	800205c <xQueueGenericSendFromISR+0xb0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	2b00      	cmp	r3, #0
 800203c:	d013      	beq.n	8002066 <xQueueGenericSendFromISR+0xba>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	3324      	adds	r3, #36	; 0x24
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fb86 	bl	8001754 <xTaskRemoveFromEventList>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <xQueueGenericSendFromISR+0xba>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <xQueueGenericSendFromISR+0xba>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	e004      	b.n	8002066 <xQueueGenericSendFromISR+0xba>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8002066:	2301      	movs	r3, #1
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e001      	b.n	8002070 <xQueueGenericSendFromISR+0xc4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8002070:	6978      	ldr	r0, [r7, #20]
 8002072:	f000 fbb5 	bl	80027e0 <vPortClearInterruptMask>

	return xReturn;
 8002076:	69fb      	ldr	r3, [r7, #28]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle xQueue, const void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;
xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <xQueueGenericReceive+0x22>
 800209c:	f000 fb96 	bl	80027cc <ulPortSetInterruptMask>
 80020a0:	e7fe      	b.n	80020a0 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d103      	bne.n	80020b0 <xQueueGenericReceive+0x30>
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <xQueueGenericReceive+0x34>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <xQueueGenericReceive+0x36>
 80020b4:	2300      	movs	r3, #0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <xQueueGenericReceive+0x40>
 80020ba:	f000 fb87 	bl	80027cc <ulPortSetInterruptMask>
 80020be:	e7fe      	b.n	80020be <xQueueGenericReceive+0x3e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80020c0:	f000 fb62 	bl	8002788 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d03b      	beq.n	8002144 <xQueueGenericReceive+0xc4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80020d2:	6a38      	ldr	r0, [r7, #32]
 80020d4:	68b9      	ldr	r1, [r7, #8]
 80020d6:	f000 f909 	bl	80022ec <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d11c      	bne.n	800211a <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	1e5a      	subs	r2, r3, #1
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d104      	bne.n	80020fc <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( signed char * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as xTaskHandle is a typedef. */
 80020f2:	f7ff fd4b 	bl	8001b8c <xTaskGetCurrentTaskHandle>
 80020f6:	4602      	mov	r2, r0
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01b      	beq.n	800213c <xQueueGenericReceive+0xbc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	3310      	adds	r3, #16
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fb23 	bl	8001754 <xTaskRemoveFromEventList>
 800210e:	4603      	mov	r3, r0
 8002110:	2b01      	cmp	r3, #1
 8002112:	d113      	bne.n	800213c <xQueueGenericReceive+0xbc>
						{
							portYIELD_WITHIN_API();
 8002114:	f000 fb28 	bl	8002768 <vPortYield>
 8002118:	e010      	b.n	800213c <xQueueGenericReceive+0xbc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	2b00      	cmp	r3, #0
 8002126:	d009      	beq.n	800213c <xQueueGenericReceive+0xbc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	3324      	adds	r3, #36	; 0x24
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fb11 	bl	8001754 <xTaskRemoveFromEventList>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <xQueueGenericReceive+0xbc>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8002138:	f000 fb16 	bl	8002768 <vPortYield>
						}
					}
				}

				taskEXIT_CRITICAL();
 800213c:	f000 fb34 	bl	80027a8 <vPortExitCritical>
				return pdPASS;
 8002140:	2301      	movs	r3, #1
 8002142:	e066      	b.n	8002212 <xQueueGenericReceive+0x192>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d103      	bne.n	8002152 <xQueueGenericReceive+0xd2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800214a:	f000 fb2d 	bl	80027a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800214e:	2300      	movs	r3, #0
 8002150:	e05f      	b.n	8002212 <xQueueGenericReceive+0x192>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <xQueueGenericReceive+0xe6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fb55 	bl	800180c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002162:	2301      	movs	r3, #1
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
				{
					/* Entry time was already set. */
				}
			}
		}
		taskEXIT_CRITICAL();
 8002166:	f000 fb1f 	bl	80027a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800216a:	f7ff f89f 	bl	80012ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800216e:	f000 fb0b 	bl	8002788 <vPortEnterCritical>
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800217a:	d102      	bne.n	8002182 <xQueueGenericReceive+0x102>
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	2200      	movs	r2, #0
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800218a:	d102      	bne.n	8002192 <xQueueGenericReceive+0x112>
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	2200      	movs	r2, #0
 8002190:	649a      	str	r2, [r3, #72]	; 0x48
 8002192:	f000 fb09 	bl	80027a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002196:	f107 0214 	add.w	r2, r7, #20
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	f7ff fb4e 	bl	8001840 <xTaskCheckForTimeOut>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d12b      	bne.n	8002202 <xQueueGenericReceive+0x182>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021aa:	6a38      	ldr	r0, [r7, #32]
 80021ac:	f000 f910 	bl	80023d0 <prvIsQueueEmpty>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d01f      	beq.n	80021f6 <xQueueGenericReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d108      	bne.n	80021d0 <xQueueGenericReceive+0x150>
					{
						portENTER_CRITICAL();
 80021be:	f000 fae3 	bl	8002788 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fd0e 	bl	8001be8 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 80021cc:	f000 faec 	bl	80027a8 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	f7ff fa5c 	bl	8001698 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021e0:	6a38      	ldr	r0, [r7, #32]
 80021e2:	f000 f8a9 	bl	8002338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021e6:	f7ff f86f 	bl	80012c8 <xTaskResumeAll>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10f      	bne.n	8002210 <xQueueGenericReceive+0x190>
				{
					portYIELD_WITHIN_API();
 80021f0:	f000 faba 	bl	8002768 <vPortYield>
 80021f4:	e00c      	b.n	8002210 <xQueueGenericReceive+0x190>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021f6:	6a38      	ldr	r0, [r7, #32]
 80021f8:	f000 f89e 	bl	8002338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021fc:	f7ff f864 	bl	80012c8 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 8002200:	e75e      	b.n	80020c0 <xQueueGenericReceive+0x40>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8002202:	6a38      	ldr	r0, [r7, #32]
 8002204:	f000 f898 	bl	8002338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002208:	f7ff f85e 	bl	80012c8 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800220c:	2300      	movs	r3, #0
 800220e:	e000      	b.n	8002212 <xQueueGenericReceive+0x192>
		}
	}
 8002210:	e756      	b.n	80020c0 <xQueueGenericReceive+0x40>
}
 8002212:	4618      	mov	r0, r3
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop

0800221c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10c      	bne.n	800224a <prvCopyDataToQueue+0x2e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d151      	bne.n	80022dc <prvCopyDataToQueue+0xc0>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fd2d 	bl	8001c9c <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	e048      	b.n	80022dc <prvCopyDataToQueue+0xc0>
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d11a      	bne.n	8002286 <prvCopyDataToQueue+0x6a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	4610      	mov	r0, r2
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	461a      	mov	r2, r3
 800225e:	f7fd ffbd 	bl	80001dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	441a      	add	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	d32f      	bcc.n	80022dc <prvCopyDataToQueue+0xc0>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e02a      	b.n	80022dc <prvCopyDataToQueue+0xc0>
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4610      	mov	r0, r2
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	461a      	mov	r2, r3
 8002294:	f7fd ffa2 	bl	80001dc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	425b      	negs	r3, r3
 80022a2:	441a      	add	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	68da      	ldr	r2, [r3, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d207      	bcs.n	80022c4 <prvCopyDataToQueue+0xa8>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022bc:	425b      	negs	r3, r3
 80022be:	441a      	add	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	60da      	str	r2, [r3, #12]
		}

		if( xPosition == queueOVERWRITE )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d108      	bne.n	80022dc <prvCopyDataToQueue+0xc0>
		{
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <prvCopyDataToQueue+0xc0>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	1e5a      	subs	r2, r3, #1
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void * const pvBuffer )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d019      	beq.n	8002332 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	441a      	add	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	d303      	bcc.n	8002320 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	60da      	str	r2, [r3, #12]
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	6838      	ldr	r0, [r7, #0]
 800232a:	4611      	mov	r1, r2
 800232c:	461a      	mov	r2, r3
 800232e:	f7fd ff55 	bl	80001dc <memcpy>
	}
}
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQUEUE *pxQueue )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002340:	f000 fa22 	bl	8002788 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002344:	e014      	b.n	8002370 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3324      	adds	r3, #36	; 0x24
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f9fe 	bl	8001754 <xTaskRemoveFromEventList>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800235e:	f7ff fabf 	bl	80018e0 <vTaskMissedYield>
 8002362:	e000      	b.n	8002366 <prvUnlockQueue+0x2e>
					}
				}
				else
				{
					break;
 8002364:	e008      	b.n	8002378 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236a:	1e5a      	subs	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002374:	2b00      	cmp	r3, #0
 8002376:	dce6      	bgt.n	8002346 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800237e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002380:	f000 fa12 	bl	80027a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002384:	f000 fa00 	bl	8002788 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002388:	e014      	b.n	80023b4 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00f      	beq.n	80023b2 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3310      	adds	r3, #16
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff f9dc 	bl	8001754 <xTaskRemoveFromEventList>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
 80023a2:	f7ff fa9d 	bl	80018e0 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	1e5a      	subs	r2, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
 80023b0:	e000      	b.n	80023b4 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
 80023b2:	e003      	b.n	80023bc <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	dce6      	bgt.n	800238a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80023c4:	f000 f9f0 	bl	80027a8 <vPortExitCritical>
}
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop

080023d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQUEUE *pxQueue )
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80023d8:	f000 f9d6 	bl	8002788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE )  0 )
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80023e4:	2301      	movs	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e001      	b.n	80023ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023ee:	f000 f9db 	bl	80027a8 <vPortExitCritical>

	return xReturn;
 80023f2:	68fb      	ldr	r3, [r7, #12]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQUEUE *pxQueue )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002404:	f000 f9c0 	bl	8002788 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002410:	429a      	cmp	r2, r3
 8002412:	d102      	bne.n	800241a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002414:	2301      	movs	r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	e001      	b.n	800241e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800241e:	f000 f9c3 	bl	80027a8 <vPortExitCritical>

	return xReturn;
 8002422:	68fb      	ldr	r3, [r7, #12]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( xQueueHandle xQueue, portTickType xTicksToWait )
	{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
	xQUEUE * const pxQueue = ( xQUEUE * ) xQueue;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800243a:	f000 f9a5 	bl	8002788 <vPortEnterCritical>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002446:	d102      	bne.n	800244e <vQueueWaitForMessageRestricted+0x22>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002456:	d102      	bne.n	800245e <vQueueWaitForMessageRestricted+0x32>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	649a      	str	r2, [r3, #72]	; 0x48
 800245e:	f000 f9a3 	bl	80027a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	3324      	adds	r3, #36	; 0x24
 800246e:	4618      	mov	r0, r3
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	f7ff f947 	bl	8001704 <vTaskPlaceOnEventListRestricted>
		}
		prvUnlockQueue( pxQueue );
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f7ff ff5e 	bl	8002338 <prvUnlockQueue>
	}
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop

08002484 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList * const pxList )
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f103 0208 	add.w	r2, r3, #8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800249c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f103 0208 	add.w	r2, r3, #8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f103 0208 	add.w	r2, r3, #8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
}
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop

080024c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem * const pxItem )
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
}
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
xListItem * pxIndex;

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry. */
	pxIndex = pxList->pxIndex;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	601a      	str	r2, [r3, #0]
}
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop

08002524 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800253a:	d103      	bne.n	8002544 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e00c      	b.n	800255e <vListInsert+0x3a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3308      	adds	r3, #8
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e002      	b.n	8002552 <vListInsert+0x2e>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	d9f6      	bls.n	800254c <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	601a      	str	r2, [r3, #0]
}
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <uxListRemove>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6892      	ldr	r2, [r2, #8]
 80025a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6852      	ldr	r2, [r2, #4]
 80025ae:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d103      	bne.n	80025c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1e5a      	subs	r2, r3, #1
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	3b04      	subs	r3, #4
 80025f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	3b04      	subs	r3, #4
 8002606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3b04      	subs	r3, #4
 8002612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) portTASK_RETURN_ADDRESS;	/* LR */
 8002614:	4a0c      	ldr	r2, [pc, #48]	; (8002648 <pxPortInitialiseStack+0x60>)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3b14      	subs	r3, #20
 800261e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	3b04      	subs	r3, #4
 800262a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f06f 0202 	mvn.w	r2, #2
 8002632:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	3b20      	subs	r3, #32
 8002638:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	0800264d 	.word	0x0800264d

0800264c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <prvTaskExitError+0x1c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002658:	d002      	beq.n	8002660 <prvTaskExitError+0x14>
 800265a:	f000 f8b7 	bl	80027cc <ulPortSetInterruptMask>
 800265e:	e7fe      	b.n	800265e <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
 8002660:	f000 f8b4 	bl	80027cc <ulPortSetInterruptMask>
	for( ;; );
 8002664:	e7fe      	b.n	8002664 <prvTaskExitError+0x18>
 8002666:	bf00      	nop
 8002668:	20000008 	.word	0x20000008

0800266c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <pxCurrentTCBConst2>)
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	6808      	ldr	r0, [r1, #0]
 8002672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002676:	f380 8809 	msr	PSP, r0
 800267a:	f04f 0000 	mov.w	r0, #0
 800267e:	f380 8811 	msr	BASEPRI, r0
 8002682:	4770      	bx	lr

08002684 <pxCurrentTCBConst2>:
 8002684:	20000484 	.word	0x20000484

08002688 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002688:	4803      	ldr	r0, [pc, #12]	; (8002698 <prvPortStartFirstTask+0x10>)
 800268a:	6800      	ldr	r0, [r0, #0]
 800268c:	6800      	ldr	r0, [r0, #0]
 800268e:	f380 8808 	msr	MSP, r0
 8002692:	b662      	cpsie	i
 8002694:	df00      	svc	0
 8002696:	bf00      	nop
 8002698:	e000ed08 	.word	0xe000ed08

0800269c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile unsigned long ulOriginalPriority;
		volatile char * const pcFirstUserPriorityRegister = ( volatile char * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80026a2:	4b2b      	ldr	r3, [pc, #172]	; (8002750 <xPortStartScheduler+0xb4>)
 80026a4:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pcFirstUserPriorityRegister;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pcFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	22ff      	movs	r2, #255	; 0xff
 80026b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pcFirstUserPriorityRegister;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <xPortStartScheduler+0xb8>)
 80026c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <xPortStartScheduler+0xbc>)
 80026cc:	2207      	movs	r2, #7
 80026ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026d0:	e009      	b.n	80026e6 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <xPortStartScheduler+0xbc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <xPortStartScheduler+0xbc>)
 80026da:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	b25b      	sxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	dbef      	blt.n	80026d2 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( unsigned char ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <xPortStartScheduler+0xbc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	021a      	lsls	r2, r3, #8
 80026f8:	4b17      	ldr	r3, [pc, #92]	; (8002758 <xPortStartScheduler+0xbc>)
 80026fa:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <xPortStartScheduler+0xbc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <xPortStartScheduler+0xbc>)
 8002706:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pcFirstUserPriorityRegister = ulOriginalPriority;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <xPortStartScheduler+0xc0>)
 8002712:	4a12      	ldr	r2, [pc, #72]	; (800275c <xPortStartScheduler+0xc0>)
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800271a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <xPortStartScheduler+0xc0>)
 800271e:	4a0f      	ldr	r2, [pc, #60]	; (800275c <xPortStartScheduler+0xc0>)
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002726:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002728:	f000 f89a 	bl	8002860 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800272c:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <xPortStartScheduler+0xc4>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002732:	f000 f8af 	bl	8002894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <xPortStartScheduler+0xc8>)
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <xPortStartScheduler+0xc8>)
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002740:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002742:	f7ff ffa1 	bl	8002688 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	e000e400 	.word	0xe000e400
 8002754:	20000580 	.word	0x20000580
 8002758:	20000584 	.word	0x20000584
 800275c:	e000ed20 	.word	0xe000ed20
 8002760:	20000008 	.word	0x20000008
 8002764:	e000ef34 	.word	0xe000ef34

08002768 <vPortYield>:
	is nothing to return to.  */
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <vPortYield+0x1c>)
 800276e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002772:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8002774:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8002778:	f3bf 8f6f 	isb	sy
}
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed04 	.word	0xe000ed04

08002788 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800278c:	f000 f81e 	bl	80027cc <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <vPortEnterCritical+0x1c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <vPortEnterCritical+0x1c>)
 8002798:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800279a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800279e:	f3bf 8f6f 	isb	sy
}
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000008 	.word	0x20000008

080027a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <vPortExitCritical+0x20>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <vPortExitCritical+0x20>)
 80027b4:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <vPortExitCritical+0x20>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
 80027be:	2000      	movs	r0, #0
 80027c0:	f000 f80e 	bl	80027e0 <vPortClearInterruptMask>
	}
}
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000008 	.word	0x20000008

080027cc <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
 80027cc:	f3ef 8011 	mrs	r0, BASEPRI
 80027d0:	f04f 0150 	mov.w	r1, #80	; 0x50
 80027d4:	f381 8811 	msr	BASEPRI, r1
 80027d8:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bf00      	nop

080027e0 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
 80027e0:	f380 8811 	msr	BASEPRI, r0
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop

080027e8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80027e8:	f3ef 8009 	mrs	r0, PSP
 80027ec:	4b11      	ldr	r3, [pc, #68]	; (8002834 <pxCurrentTCBConst>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	f01e 0f10 	tst.w	lr, #16
 80027f4:	bf08      	it	eq
 80027f6:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80027fa:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027fe:	6010      	str	r0, [r2, #0]
 8002800:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002804:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002808:	f380 8811 	msr	BASEPRI, r0
 800280c:	f7fe feca 	bl	80015a4 <vTaskSwitchContext>
 8002810:	f04f 0000 	mov.w	r0, #0
 8002814:	f380 8811 	msr	BASEPRI, r0
 8002818:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	6808      	ldr	r0, [r1, #0]
 8002820:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002824:	f01e 0f10 	tst.w	lr, #16
 8002828:	bf08      	it	eq
 800282a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800282e:	f380 8809 	msr	PSP, r0
 8002832:	4770      	bx	lr

08002834 <pxCurrentTCBConst>:
 8002834:	20000484 	.word	0x20000484

08002838 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 800283c:	f7ff ffc6 	bl	80027cc <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002840:	f7fe fdda 	bl	80013f8 <xTaskIncrementTick>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800284a:	4b04      	ldr	r3, [pc, #16]	; (800285c <SysTick_Handler+0x24>)
 800284c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002850:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8002852:	2000      	movs	r0, #0
 8002854:	f7ff ffc4 	bl	80027e0 <vPortClearInterruptMask>
}
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <vPortSetupTimerInterrupt+0x24>)
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <vPortSetupTimerInterrupt+0x28>)
 8002868:	6811      	ldr	r1, [r2, #0]
 800286a:	4a08      	ldr	r2, [pc, #32]	; (800288c <vPortSetupTimerInterrupt+0x2c>)
 800286c:	fba2 0201 	umull	r0, r2, r2, r1
 8002870:	0992      	lsrs	r2, r2, #6
 8002872:	3a01      	subs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <vPortSetupTimerInterrupt+0x30>)
 8002878:	2207      	movs	r2, #7
 800287a:	601a      	str	r2, [r3, #0]
}
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000e014 	.word	0xe000e014
 8002888:	20000000 	.word	0x20000000
 800288c:	10624dd3 	.word	0x10624dd3
 8002890:	e000e010 	.word	0xe000e010

08002894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80028a4 <vPortEnableVFP+0x10>
 8002898:	6801      	ldr	r1, [r0, #0]
 800289a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800289e:	6001      	str	r1, [r0, #0]
 80028a0:	4770      	bx	lr
 80028a2:	0000      	.short	0x0000
 80028a4:	e000ed88 	.word	0xe000ed88

080028a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
	unsigned long ulCurrentInterrupt;
	unsigned char ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80028ae:	f3ef 8305 	mrs	r3, IPSR
 80028b2:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	d90c      	bls.n	80028d4 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80028ba:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <vPortValidateInterruptPriority+0x48>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <vPortValidateInterruptPriority+0x4c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d202      	bcs.n	80028d4 <vPortValidateInterruptPriority+0x2c>
 80028ce:	f7ff ff7d 	bl	80027cc <ulPortSetInterruptMask>
 80028d2:	e7fe      	b.n	80028d2 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <vPortValidateInterruptPriority+0x50>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <vPortValidateInterruptPriority+0x54>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d902      	bls.n	80028ea <vPortValidateInterruptPriority+0x42>
 80028e4:	f7ff ff72 	bl	80027cc <ulPortSetInterruptMask>
 80028e8:	e7fe      	b.n	80028e8 <vPortValidateInterruptPriority+0x40>
	}
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	e000e3f0 	.word	0xe000e3f0
 80028f4:	20000580 	.word	0x20000580
 80028f8:	e000ed0c 	.word	0xe000ed0c
 80028fc:	20000584 	.word	0x20000584

08002900 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af04      	add	r7, sp, #16
portBASE_TYPE xReturn = pdFAIL;
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800290a:	f000 fa45 	bl	8002d98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <xTimerCreateTimerTask+0x4c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00f      	beq.n	8002936 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8002916:	2302      	movs	r3, #2
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2300      	movs	r3, #0
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2300      	movs	r3, #0
 8002920:	9302      	str	r3, [sp, #8]
 8002922:	2300      	movs	r3, #0
 8002924:	9303      	str	r3, [sp, #12]
 8002926:	480a      	ldr	r0, [pc, #40]	; (8002950 <xTimerCreateTimerTask+0x50>)
 8002928:	490a      	ldr	r1, [pc, #40]	; (8002954 <xTimerCreateTimerTask+0x54>)
 800292a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800292e:	2300      	movs	r3, #0
 8002930:	f7fe fb0a 	bl	8000f48 <xTaskGenericCreate>
 8002934:	6078      	str	r0, [r7, #4]
		}
		#endif
	}

	configASSERT( xReturn );
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <xTimerCreateTimerTask+0x42>
 800293c:	f7ff ff46 	bl	80027cc <ulPortSetInterruptMask>
 8002940:	e7fe      	b.n	8002940 <xTimerCreateTimerTask+0x40>
	return xReturn;
 8002942:	687b      	ldr	r3, [r7, #4]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	200005b8 	.word	0x200005b8
 8002950:	08002a55 	.word	0x08002a55
 8002954:	080041b0 	.word	0x080041b0

08002958 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
portBASE_TYPE xReturn = pdFAIL;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800296a:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <xTimerGenericCommand+0x88>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d030      	beq.n	80029d4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	613b      	str	r3, [r7, #16]
		xMessage.xMessageValue = xOptionalValue;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	617b      	str	r3, [r7, #20]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	61bb      	str	r3, [r7, #24]

		if( pxHigherPriorityTaskWoken == NULL )
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d11c      	bne.n	80029be <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002984:	f7ff f912 	bl	8001bac <xTaskGetSchedulerState>
 8002988:	4603      	mov	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	d10b      	bne.n	80029a6 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <xTimerGenericCommand+0x88>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	f107 0310 	add.w	r3, r7, #16
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800299c:	2300      	movs	r3, #0
 800299e:	f7ff fa55 	bl	8001e4c <xQueueGenericSend>
 80029a2:	61f8      	str	r0, [r7, #28]
 80029a4:	e016      	b.n	80029d4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <xTimerGenericCommand+0x88>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	f107 0310 	add.w	r3, r7, #16
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	2200      	movs	r2, #0
 80029b4:	2300      	movs	r3, #0
 80029b6:	f7ff fa49 	bl	8001e4c <xQueueGenericSend>
 80029ba:	61f8      	str	r0, [r7, #28]
 80029bc:	e00a      	b.n	80029d4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <xTimerGenericCommand+0x88>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	f107 0310 	add.w	r3, r7, #16
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	2300      	movs	r3, #0
 80029ce:	f7ff faed 	bl	8001fac <xQueueGenericSendFromISR>
 80029d2:	61f8      	str	r0, [r7, #28]
		}

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
 80029d4:	69fb      	ldr	r3, [r7, #28]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200005b8 	.word	0x200005b8

080029e4 <prvProcessExpiredTimer>:

#endif
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( portTickType xNextExpireTime, portTickType xTimeNow )
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <prvProcessExpiredTimer+0x6c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	60fb      	str	r3, [r7, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3304      	adds	r3, #4
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fdc9 	bl	8002594 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d11b      	bne.n	8002a42 <prvProcessExpiredTimer+0x5e>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	4619      	mov	r1, r3
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f000 f8a9 	bl	8002b70 <prvInsertTimerInActiveList>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d10e      	bne.n	8002a42 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002a24:	2300      	movs	r3, #0
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f7ff ff92 	bl	8002958 <xTimerGenericCommand>
 8002a34:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <prvProcessExpiredTimer+0x5e>
 8002a3c:	f7ff fec6 	bl	80027cc <ulPortSetInterruptMask>
 8002a40:	e7fe      	b.n	8002a40 <prvProcessExpiredTimer+0x5c>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	4798      	blx	r3
}
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200005b0 	.word	0x200005b0

08002a54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 f83f 	bl	8002ae4 <prvGetNextExpireTime>
 8002a66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f000 f803 	bl	8002a78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002a72:	f000 f8bf 	bl	8002bf4 <prvProcessReceivedCommands>
	}
 8002a76:	e7f1      	b.n	8002a5c <prvTimerTask+0x8>

08002a78 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002a82:	f7fe fc13 	bl	80012ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a86:	f107 0308 	add.w	r3, r7, #8
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f84e 	bl	8002b2c <prvSampleTimeNow>
 8002a90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11e      	bne.n	8002ad6 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <prvProcessTimerOrBlockTask+0x3c>
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d806      	bhi.n	8002ab4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002aa6:	f7fe fc0f 	bl	80012c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	68f9      	ldr	r1, [r7, #12]
 8002aae:	f7ff ff99 	bl	80029e4 <prvProcessExpiredTimer>
 8002ab2:	e012      	b.n	8002ada <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <prvProcessTimerOrBlockTask+0x68>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1acb      	subs	r3, r1, r3
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7ff fcb3 	bl	800242c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
 8002ac6:	f7fe fbff 	bl	80012c8 <xTaskResumeAll>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
 8002ad0:	f7ff fe4a 	bl	8002768 <vPortYield>
 8002ad4:	e001      	b.n	8002ada <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
 8002ad6:	f7fe fbf7 	bl	80012c8 <xTaskResumeAll>
		}
	}
}
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200005b8 	.word	0x200005b8

08002ae4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static portTickType prvGetNextExpireTime( portBASE_TYPE *pxListWasEmpty )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <prvGetNextExpireTime+0x44>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf14      	ite	ne
 8002af6:	2300      	movne	r3, #0
 8002af8:	2301      	moveq	r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d105      	bne.n	8002b16 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <prvGetNextExpireTime+0x44>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e001      	b.n	8002b1a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	200005b0 	.word	0x200005b0

08002b2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002b34:	f7fe fc4e 	bl	80013d4 <xTaskGetTickCount>
 8002b38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <prvSampleTimeNow+0x40>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d208      	bcs.n	8002b56 <prvSampleTimeNow+0x2a>
	{
		prvSwitchTimerLists( xLastTime );
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <prvSampleTimeNow+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f8cb 	bl	8002ce4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	e002      	b.n	8002b5c <prvSampleTimeNow+0x30>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <prvSampleTimeNow+0x40>)
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8002b62:	68fb      	ldr	r3, [r7, #12]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	200005bc 	.word	0x200005bc

08002b70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
portBASE_TYPE xProcessTimerNow = pdFALSE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d812      	bhi.n	8002bbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	1ad2      	subs	r2, r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d302      	bcc.n	8002baa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e01b      	b.n	8002be2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <prvInsertTimerInActiveList+0x7c>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f7ff fcb5 	bl	8002524 <vListInsert>
 8002bba:	e012      	b.n	8002be2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d206      	bcs.n	8002bd2 <prvInsertTimerInActiveList+0x62>
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	e007      	b.n	8002be2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <prvInsertTimerInActiveList+0x80>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	4610      	mov	r0, r2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f7ff fca1 	bl	8002524 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002be2:	697b      	ldr	r3, [r7, #20]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	200005b4 	.word	0x200005b4
 8002bf0:	200005b0 	.word	0x200005b0

08002bf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08a      	sub	sp, #40	; 0x28
 8002bf8:	af02      	add	r7, sp, #8
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002bfa:	e060      	b.n	8002cbe <prvProcessReceivedCommands+0xca>
	{
		pxTimer = xMessage.pxTimer;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	61fb      	str	r3, [r7, #28]

		if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d004      	beq.n	8002c12 <prvProcessReceivedCommands+0x1e>
		{
			/* The timer is in a list, remove it. */
			( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fcc1 	bl	8002594 <uxListRemove>
		it must be present in the function call.  prvSampleTimeNow() must be 
		called after the message is received from xTimerQueue so there is no 
		possibility of a higher priority task adding a message to the message
		queue with a time that is ahead of the timer daemon task (because it
		pre-empted the timer daemon task after the xTimeNow value was set). */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff89 	bl	8002b2c <prvSampleTimeNow>
 8002c1a:	61b8      	str	r0, [r7, #24]

		switch( xMessage.xMessageID )
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d84c      	bhi.n	8002cbc <prvProcessReceivedCommands+0xc8>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <prvProcessReceivedCommands+0x34>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c39 	.word	0x08002c39
 8002c2c:	08002cbd 	.word	0x08002cbd
 8002c30:	08002c8b 	.word	0x08002c8b
 8002c34:	08002cb5 	.word	0x08002cb5
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	441a      	add	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	69f8      	ldr	r0, [r7, #28]
 8002c44:	4611      	mov	r1, r2
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	f7ff ff92 	bl	8002b70 <prvInsertTimerInActiveList>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d11a      	bne.n	8002c88 <prvProcessReceivedCommands+0x94>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	69f8      	ldr	r0, [r7, #28]
 8002c58:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d112      	bne.n	8002c88 <prvProcessReceivedCommands+0x94>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4413      	add	r3, r2
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	9200      	str	r2, [sp, #0]
 8002c6e:	69f8      	ldr	r0, [r7, #28]
 8002c70:	2100      	movs	r1, #0
 8002c72:	461a      	mov	r2, r3
 8002c74:	2300      	movs	r3, #0
 8002c76:	f7ff fe6f 	bl	8002958 <xTimerGenericCommand>
 8002c7a:	6178      	str	r0, [r7, #20]
						configASSERT( xResult );
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d102      	bne.n	8002c88 <prvProcessReceivedCommands+0x94>
 8002c82:	f7ff fda3 	bl	80027cc <ulPortSetInterruptMask>
 8002c86:	e7fe      	b.n	8002c86 <prvProcessReceivedCommands+0x92>
						( void ) xResult;
					}
				}
				break;
 8002c88:	e019      	b.n	8002cbe <prvProcessReceivedCommands+0xca>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	619a      	str	r2, [r3, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <prvProcessReceivedCommands+0xaa>
 8002c98:	f7ff fd98 	bl	80027cc <ulPortSetInterruptMask>
 8002c9c:	e7fe      	b.n	8002c9c <prvProcessReceivedCommands+0xa8>
				longer or shorter than the old one.  The command time is 
				therefore set to the current time, and as the period cannot be
				zero the next expiry time can only be in the future, meaning
				(unlike for the xTimerStart() case above) there is no fail case
				that needs to be handled here. */
				( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	69f8      	ldr	r0, [r7, #28]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f7ff ff5f 	bl	8002b70 <prvInsertTimerInActiveList>
				break;
 8002cb2:	e004      	b.n	8002cbe <prvProcessReceivedCommands+0xca>

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
 8002cb4:	69f8      	ldr	r0, [r7, #28]
 8002cb6:	f000 f8e5 	bl	8002e84 <vPortFree>
				break;
 8002cba:	e000      	b.n	8002cbe <prvProcessReceivedCommands+0xca>

			default	:
				/* Don't expect to get here. */
				break;
 8002cbc:	bf00      	nop
xTIMER_MESSAGE xMessage;
xTIMER *pxTimer;
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <prvProcessReceivedCommands+0xec>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	f107 0308 	add.w	r3, r7, #8
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f7ff f9d7 	bl	8002080 <xQueueGenericReceive>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d191      	bne.n	8002bfc <prvProcessReceivedCommands+0x8>
			default	:
				/* Don't expect to get here. */
				break;
		}
	}
}
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200005b8 	.word	0x200005b8

08002ce4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( portTickType xLastTime )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af02      	add	r7, sp, #8
 8002cea:	6078      	str	r0, [r7, #4]

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002cec:	e03d      	b.n	8002d6a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cee:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <prvSwitchTimerLists+0xac>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	61fb      	str	r3, [r7, #28]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <prvSwitchTimerLists+0xac>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	3304      	adds	r3, #4
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fc44 	bl	8002594 <uxListRemove>

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	69b8      	ldr	r0, [r7, #24]
 8002d12:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d126      	bne.n	8002d6a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	4413      	add	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
			if( xReloadTime > xNextExpireTime )
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d90e      	bls.n	8002d4c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <prvSwitchTimerLists+0xac>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	3304      	adds	r3, #4
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7ff fbed 	bl	8002524 <vListInsert>
 8002d4a:	e00e      	b.n	8002d6a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	69b8      	ldr	r0, [r7, #24]
 8002d52:	2100      	movs	r1, #0
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	2300      	movs	r3, #0
 8002d58:	f7ff fdfe 	bl	8002958 <xTimerGenericCommand>
 8002d5c:	6138      	str	r0, [r7, #16]
				configASSERT( xResult );
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d102      	bne.n	8002d6a <prvSwitchTimerLists+0x86>
 8002d64:	f7ff fd32 	bl	80027cc <ulPortSetInterruptMask>
 8002d68:	e7fe      	b.n	8002d68 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <prvSwitchTimerLists+0xac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1bc      	bne.n	8002cee <prvSwitchTimerLists+0xa>
				( void ) xResult;
			}
		}
	}

	pxTemp = pxCurrentTimerList;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <prvSwitchTimerLists+0xac>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]
	pxCurrentTimerList = pxOverflowTimerList;
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <prvSwitchTimerLists+0xb0>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <prvSwitchTimerLists+0xac>)
 8002d80:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <prvSwitchTimerLists+0xb0>)
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	601a      	str	r2, [r3, #0]
}
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200005b0 	.word	0x200005b0
 8002d94:	200005b4 	.word	0x200005b4

08002d98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002d9c:	f7ff fcf4 	bl	8002788 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <prvCheckForValidListAndQueue+0x40>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d113      	bne.n	8002dd0 <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 8002da8:	480c      	ldr	r0, [pc, #48]	; (8002ddc <prvCheckForValidListAndQueue+0x44>)
 8002daa:	f7ff fb6b 	bl	8002484 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002dae:	480c      	ldr	r0, [pc, #48]	; (8002de0 <prvCheckForValidListAndQueue+0x48>)
 8002db0:	f7ff fb68 	bl	8002484 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <prvCheckForValidListAndQueue+0x4c>)
 8002db6:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <prvCheckForValidListAndQueue+0x44>)
 8002db8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <prvCheckForValidListAndQueue+0x50>)
 8002dbc:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <prvCheckForValidListAndQueue+0x48>)
 8002dbe:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
 8002dc0:	200a      	movs	r0, #10
 8002dc2:	210c      	movs	r1, #12
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f7fe ffff 	bl	8001dc8 <xQueueGenericCreate>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	4b02      	ldr	r3, [pc, #8]	; (8002dd8 <prvCheckForValidListAndQueue+0x40>)
 8002dce:	601a      	str	r2, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
 8002dd0:	f7ff fcea 	bl	80027a8 <vPortExitCritical>
}
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200005b8 	.word	0x200005b8
 8002ddc:	20000588 	.word	0x20000588
 8002de0:	2000059c 	.word	0x2000059c
 8002de4:	200005b0 	.word	0x200005b0
 8002de8:	200005b4 	.word	0x200005b4

08002dec <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
static unsigned char *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f023 0307 	bic.w	r3, r3, #7
 8002e08:	3308      	adds	r3, #8
 8002e0a:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8002e0c:	f7fe fa4e 	bl	80012ac <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8002e10:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <pvPortMalloc+0x88>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8002e18:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <pvPortMalloc+0x8c>)
 8002e1a:	f023 0307 	bic.w	r3, r3, #7
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <pvPortMalloc+0x88>)
 8002e22:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <pvPortMalloc+0x90>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	441a      	add	r2, r3
 8002e2c:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <pvPortMalloc+0x94>)
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d813      	bhi.n	8002e5a <pvPortMalloc+0x6e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <pvPortMalloc+0x90>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	441a      	add	r2, r3
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <pvPortMalloc+0x90>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( unsigned char * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d90b      	bls.n	8002e5a <pvPortMalloc+0x6e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <pvPortMalloc+0x88>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <pvPortMalloc+0x90>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <pvPortMalloc+0x90>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	441a      	add	r2, r3
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <pvPortMalloc+0x90>)
 8002e58:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}	
	xTaskResumeAll();
 8002e5a:	f7fe fa35 	bl	80012c8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <pvPortMalloc+0x7c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8002e64:	f7fd ff4a 	bl	8000cfc <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8002e68:	68fb      	ldr	r3, [r7, #12]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200131c4 	.word	0x200131c4
 8002e78:	200005c8 	.word	0x200005c8
 8002e7c:	200131c0 	.word	0x200131c0
 8002e80:	00012bf7 	.word	0x00012bf7

08002e84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <vPortFree+0x14>
 8002e92:	f7ff fc9b 	bl	80027cc <ulPortSetInterruptMask>
 8002e96:	e7fe      	b.n	8002e96 <vPortFree+0x12>
}
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop

08002ea0 <vStartLEDFlashTasks>:
static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );

/*-----------------------------------------------------------*/

void vStartLEDFlashTasks( unsigned portBASE_TYPE uxPriority )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af04      	add	r7, sp, #16
 8002ea6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xLEDTask;

	/* Create the three tasks. */
	//for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
	for( xLEDTask = 0; xLEDTask < 3; ++xLEDTask )
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e010      	b.n	8002ed0 <vStartLEDFlashTasks+0x30>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, ( signed char * ) "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( xTaskHandle * ) NULL );
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	9301      	str	r3, [sp, #4]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9303      	str	r3, [sp, #12]
 8002ebe:	4807      	ldr	r0, [pc, #28]	; (8002edc <vStartLEDFlashTasks+0x3c>)
 8002ec0:	4907      	ldr	r1, [pc, #28]	; (8002ee0 <vStartLEDFlashTasks+0x40>)
 8002ec2:	2282      	movs	r2, #130	; 0x82
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f7fe f83f 	bl	8000f48 <xTaskGenericCreate>
{
signed portBASE_TYPE xLEDTask;

	/* Create the three tasks. */
	//for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
	for( xLEDTask = 0; xLEDTask < 3; ++xLEDTask )
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	ddeb      	ble.n	8002eae <vStartLEDFlashTasks+0xe>
	{
		/* Spawn the task. */
		xTaskCreate( vLEDFlashTask, ( signed char * ) "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( xTaskHandle * ) NULL );
	}
}
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	08002ee5 	.word	0x08002ee5
 8002ee0:	080041b8 	.word	0x080041b8

08002ee4 <vLEDFlashTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]

	/* The parameters are not used. */
	( void ) pvParameters;

	/* Calculate the LED and flash rate. */
	portENTER_CRITICAL();
 8002eec:	f7ff fc4c 	bl	8002788 <vPortEnterCritical>
	{
		/* See which of the eight LED's we should use. */
		uxLED = uxFlashTaskNumber;
 8002ef0:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <vLEDFlashTask+0x64>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	617b      	str	r3, [r7, #20]

		/* Update so the next task uses the next LED. */
		uxFlashTaskNumber++;
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <vLEDFlashTask+0x64>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <vLEDFlashTask+0x64>)
 8002efe:	601a      	str	r2, [r3, #0]
	}
	portEXIT_CRITICAL();
 8002f00:	f7ff fc52 	bl	80027a8 <vPortExitCritical>

	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( portTickType ) uxLED );
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	f240 124d 	movw	r2, #333	; 0x14d
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	613b      	str	r3, [r7, #16]
	xFlashRate /= portTICK_RATE_MS;

	/* We will turn the LED on and off again in the delay period, so each
	delay is only half the total period. */
	xFlashRate /= ( portTickType ) 2;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	613b      	str	r3, [r7, #16]

	/* We need to initialise xLastFlashTime prior to the first call to 
	vTaskDelayUntil(). */
	xLastFlashTime = xTaskGetTickCount();
 8002f18:	f7fe fa5c 	bl	80013d4 <xTaskGetTickCount>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
		/* Delay for half the flash period then turn the LED on. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	4618      	mov	r0, r3
 8002f26:	6939      	ldr	r1, [r7, #16]
 8002f28:	f7fe f908 	bl	800113c <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 8002f2c:	6978      	ldr	r0, [r7, #20]
 8002f2e:	f7fd ff13 	bl	8000d58 <vParTestToggleLED>

		/* Delay for half the flash period then turn the LED off. */
		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	4618      	mov	r0, r3
 8002f38:	6939      	ldr	r1, [r7, #16]
 8002f3a:	f7fe f8ff 	bl	800113c <vTaskDelayUntil>
		vParTestToggleLED( uxLED );
 8002f3e:	6978      	ldr	r0, [r7, #20]
 8002f40:	f7fd ff0a 	bl	8000d58 <vParTestToggleLED>
	}
 8002f44:	e7ec      	b.n	8002f20 <vLEDFlashTask+0x3c>
 8002f46:	bf00      	nop
 8002f48:	200131c8 	.word	0x200131c8

08002f4c <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8002f56:	79fa      	ldrb	r2, [r7, #7]
 8002f58:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <STM_EVAL_LEDInit+0x50>)
 8002f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	2101      	movs	r1, #1
 8002f62:	f000 fbe7 	bl	8003734 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002f66:	79fa      	ldrb	r2, [r7, #7]
 8002f68:	4b0d      	ldr	r3, [pc, #52]	; (8002fa0 <STM_EVAL_LEDInit+0x54>)
 8002f6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002f6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002f70:	2301      	movs	r3, #1
 8002f72:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002f74:	2300      	movs	r3, #0
 8002f76:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002f80:	79fa      	ldrb	r2, [r7, #7]
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <STM_EVAL_LEDInit+0x58>)
 8002f84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f88:	f107 0308 	add.w	r3, r7, #8
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f000 f8e8 	bl	8003164 <GPIO_Init>
}
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	0800456c 	.word	0x0800456c
 8002fa0:	08004564 	.word	0x08004564
 8002fa4:	2000000c 	.word	0x2000000c

08002fa8 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8002fb2:	79fa      	ldrb	r2, [r7, #7]
 8002fb4:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <STM_EVAL_LEDToggle+0x34>)
 8002fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fba:	79f9      	ldrb	r1, [r7, #7]
 8002fbc:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <STM_EVAL_LEDToggle+0x34>)
 8002fbe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002fc2:	6951      	ldr	r1, [r2, #20]
 8002fc4:	79f8      	ldrb	r0, [r7, #7]
 8002fc6:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <STM_EVAL_LEDToggle+0x38>)
 8002fc8:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8002fcc:	404a      	eors	r2, r1
 8002fce:	615a      	str	r2, [r3, #20]
}
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	2000000c 	.word	0x2000000c
 8002fe0:	08004564 	.word	0x08004564

08002fe4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ff2:	d013      	beq.n	800301c <NVIC_PriorityGroupConfig+0x38>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ffa:	d00f      	beq.n	800301c <NVIC_PriorityGroupConfig+0x38>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003002:	d00b      	beq.n	800301c <NVIC_PriorityGroupConfig+0x38>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300a:	d007      	beq.n	800301c <NVIC_PriorityGroupConfig+0x38>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003012:	d003      	beq.n	800301c <NVIC_PriorityGroupConfig+0x38>
 8003014:	4806      	ldr	r0, [pc, #24]	; (8003030 <NVIC_PriorityGroupConfig+0x4c>)
 8003016:	2173      	movs	r1, #115	; 0x73
 8003018:	f7fd fe84 	bl	8000d24 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800301c:	4a05      	ldr	r2, [pc, #20]	; (8003034 <NVIC_PriorityGroupConfig+0x50>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003028:	60d3      	str	r3, [r2, #12]
}
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	080041c0 	.word	0x080041c0
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]
 8003044:	2300      	movs	r3, #0
 8003046:	73bb      	strb	r3, [r7, #14]
 8003048:	230f      	movs	r3, #15
 800304a:	737b      	strb	r3, [r7, #13]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <NVIC_Init+0x2c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	78db      	ldrb	r3, [r3, #3]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d003      	beq.n	8003064 <NVIC_Init+0x2c>
 800305c:	4830      	ldr	r0, [pc, #192]	; (8003120 <NVIC_Init+0xe8>)
 800305e:	2187      	movs	r1, #135	; 0x87
 8003060:	f7fd fe60 	bl	8000d24 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	785b      	ldrb	r3, [r3, #1]
 8003068:	2b0f      	cmp	r3, #15
 800306a:	d903      	bls.n	8003074 <NVIC_Init+0x3c>
 800306c:	482c      	ldr	r0, [pc, #176]	; (8003120 <NVIC_Init+0xe8>)
 800306e:	2188      	movs	r1, #136	; 0x88
 8003070:	f7fd fe58 	bl	8000d24 <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	789b      	ldrb	r3, [r3, #2]
 8003078:	2b0f      	cmp	r3, #15
 800307a:	d903      	bls.n	8003084 <NVIC_Init+0x4c>
 800307c:	4828      	ldr	r0, [pc, #160]	; (8003120 <NVIC_Init+0xe8>)
 800307e:	2189      	movs	r1, #137	; 0x89
 8003080:	f7fd fe50 	bl	8000d24 <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	78db      	ldrb	r3, [r3, #3]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d037      	beq.n	80030fc <NVIC_Init+0xc4>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800308c:	4b25      	ldr	r3, [pc, #148]	; (8003124 <NVIC_Init+0xec>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	43db      	mvns	r3, r3
 8003092:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003096:	0a1b      	lsrs	r3, r3, #8
 8003098:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	f1c3 0304 	rsb	r3, r3, #4
 80030a0:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80030a2:	7b7a      	ldrb	r2, [r7, #13]
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	fa42 f303 	asr.w	r3, r2, r3
 80030aa:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	785b      	ldrb	r3, [r3, #1]
 80030b0:	461a      	mov	r2, r3
 80030b2:	7bbb      	ldrb	r3, [r7, #14]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	789a      	ldrb	r2, [r3, #2]
 80030be:	7b7b      	ldrb	r3, [r7, #13]
 80030c0:	4013      	ands	r3, r2
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80030d0:	4a15      	ldr	r2, [pc, #84]	; (8003128 <NVIC_Init+0xf0>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	4413      	add	r3, r2
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <NVIC_Init+0xf0>)
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	0952      	lsrs	r2, r2, #5
 80030e6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	7809      	ldrb	r1, [r1, #0]
 80030ec:	f001 011f 	and.w	r1, r1, #31
 80030f0:	2001      	movs	r0, #1
 80030f2:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80030f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80030fa:	e00e      	b.n	800311a <NVIC_Init+0xe2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <NVIC_Init+0xf0>)
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	0952      	lsrs	r2, r2, #5
 8003104:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	7809      	ldrb	r1, [r1, #0]
 800310a:	f001 011f 	and.w	r1, r1, #31
 800310e:	2001      	movs	r0, #1
 8003110:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003114:	3220      	adds	r2, #32
 8003116:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	080041c0 	.word	0x080041c0
 8003124:	e000ed00 	.word	0xe000ed00
 8003128:	e000e100 	.word	0xe000e100

0800312c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	0ddb      	lsrs	r3, r3, #23
 8003138:	05db      	lsls	r3, r3, #23
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <EXTI_ClearITPendingBit+0x18>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <EXTI_ClearITPendingBit+0x22>
 8003144:	4805      	ldr	r0, [pc, #20]	; (800315c <EXTI_ClearITPendingBit+0x30>)
 8003146:	f240 111d 	movw	r1, #285	; 0x11d
 800314a:	f7fd fdeb 	bl	8000d24 <assert_failed>
  
  EXTI->PR = EXTI_Line;
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <EXTI_ClearITPendingBit+0x34>)
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	615a      	str	r2, [r3, #20]
}
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	08004208 	.word	0x08004208
 8003160:	40013c00 	.word	0x40013c00

08003164 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4b7a      	ldr	r3, [pc, #488]	; (8003368 <GPIO_Init+0x204>)
 800317e:	429a      	cmp	r2, r3
 8003180:	d023      	beq.n	80031ca <GPIO_Init+0x66>
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4b79      	ldr	r3, [pc, #484]	; (800336c <GPIO_Init+0x208>)
 8003186:	429a      	cmp	r2, r3
 8003188:	d01f      	beq.n	80031ca <GPIO_Init+0x66>
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4b78      	ldr	r3, [pc, #480]	; (8003370 <GPIO_Init+0x20c>)
 800318e:	429a      	cmp	r2, r3
 8003190:	d01b      	beq.n	80031ca <GPIO_Init+0x66>
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4b77      	ldr	r3, [pc, #476]	; (8003374 <GPIO_Init+0x210>)
 8003196:	429a      	cmp	r2, r3
 8003198:	d017      	beq.n	80031ca <GPIO_Init+0x66>
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4b76      	ldr	r3, [pc, #472]	; (8003378 <GPIO_Init+0x214>)
 800319e:	429a      	cmp	r2, r3
 80031a0:	d013      	beq.n	80031ca <GPIO_Init+0x66>
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4b75      	ldr	r3, [pc, #468]	; (800337c <GPIO_Init+0x218>)
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d00f      	beq.n	80031ca <GPIO_Init+0x66>
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4b74      	ldr	r3, [pc, #464]	; (8003380 <GPIO_Init+0x21c>)
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d00b      	beq.n	80031ca <GPIO_Init+0x66>
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4b73      	ldr	r3, [pc, #460]	; (8003384 <GPIO_Init+0x220>)
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d007      	beq.n	80031ca <GPIO_Init+0x66>
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	4b72      	ldr	r3, [pc, #456]	; (8003388 <GPIO_Init+0x224>)
 80031be:	429a      	cmp	r2, r3
 80031c0:	d003      	beq.n	80031ca <GPIO_Init+0x66>
 80031c2:	4872      	ldr	r0, [pc, #456]	; (800338c <GPIO_Init+0x228>)
 80031c4:	21bb      	movs	r1, #187	; 0xbb
 80031c6:	f7fd fdad 	bl	8000d24 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d103      	bne.n	80031da <GPIO_Init+0x76>
 80031d2:	486e      	ldr	r0, [pc, #440]	; (800338c <GPIO_Init+0x228>)
 80031d4:	21bc      	movs	r1, #188	; 0xbc
 80031d6:	f7fd fda5 	bl	8000d24 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	791b      	ldrb	r3, [r3, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00f      	beq.n	8003202 <GPIO_Init+0x9e>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	791b      	ldrb	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d00b      	beq.n	8003202 <GPIO_Init+0x9e>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	791b      	ldrb	r3, [r3, #4]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d007      	beq.n	8003202 <GPIO_Init+0x9e>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	791b      	ldrb	r3, [r3, #4]
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d003      	beq.n	8003202 <GPIO_Init+0x9e>
 80031fa:	4864      	ldr	r0, [pc, #400]	; (800338c <GPIO_Init+0x228>)
 80031fc:	21bd      	movs	r1, #189	; 0xbd
 80031fe:	f7fd fd91 	bl	8000d24 <assert_failed>
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	79db      	ldrb	r3, [r3, #7]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00b      	beq.n	8003222 <GPIO_Init+0xbe>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	79db      	ldrb	r3, [r3, #7]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d007      	beq.n	8003222 <GPIO_Init+0xbe>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	79db      	ldrb	r3, [r3, #7]
 8003216:	2b02      	cmp	r3, #2
 8003218:	d003      	beq.n	8003222 <GPIO_Init+0xbe>
 800321a:	485c      	ldr	r0, [pc, #368]	; (800338c <GPIO_Init+0x228>)
 800321c:	21be      	movs	r1, #190	; 0xbe
 800321e:	f7fd fd81 	bl	8000d24 <assert_failed>

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e097      	b.n	8003358 <GPIO_Init+0x1f4>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2201      	movs	r2, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	429a      	cmp	r2, r3
 8003242:	f040 8086 	bne.w	8003352 <GPIO_Init+0x1ee>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2103      	movs	r1, #3
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	401a      	ands	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	791b      	ldrb	r3, [r3, #4]
 8003264:	4619      	mov	r1, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	791b      	ldrb	r3, [r3, #4]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d003      	beq.n	8003284 <GPIO_Init+0x120>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	791b      	ldrb	r3, [r3, #4]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d14e      	bne.n	8003322 <GPIO_Init+0x1be>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	795b      	ldrb	r3, [r3, #5]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00f      	beq.n	80032ac <GPIO_Init+0x148>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	795b      	ldrb	r3, [r3, #5]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d00b      	beq.n	80032ac <GPIO_Init+0x148>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	795b      	ldrb	r3, [r3, #5]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d007      	beq.n	80032ac <GPIO_Init+0x148>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	795b      	ldrb	r3, [r3, #5]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d003      	beq.n	80032ac <GPIO_Init+0x148>
 80032a4:	4839      	ldr	r0, [pc, #228]	; (800338c <GPIO_Init+0x228>)
 80032a6:	21d0      	movs	r1, #208	; 0xd0
 80032a8:	f7fd fd3c 	bl	8000d24 <assert_failed>

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	2103      	movs	r1, #3
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	401a      	ands	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	795b      	ldrb	r3, [r3, #5]
 80032ca:	4619      	mov	r1, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	799b      	ldrb	r3, [r3, #6]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <GPIO_Init+0x18e>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	799b      	ldrb	r3, [r3, #6]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d003      	beq.n	80032f2 <GPIO_Init+0x18e>
 80032ea:	4828      	ldr	r0, [pc, #160]	; (800338c <GPIO_Init+0x228>)
 80032ec:	21d7      	movs	r1, #215	; 0xd7
 80032ee:	f7fd fd19 	bl	8000d24 <assert_failed>

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2101      	movs	r1, #1
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	401a      	ands	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	799b      	ldrb	r3, [r3, #6]
 8003310:	4619      	mov	r1, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	b29b      	uxth	r3, r3
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	b29b      	uxth	r3, r3
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	b29b      	uxth	r3, r3
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2103      	movs	r1, #3
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	401a      	ands	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	79db      	ldrb	r3, [r3, #7]
 8003342:	4619      	mov	r1, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa01 f303 	lsl.w	r3, r1, r3
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	3301      	adds	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2b0f      	cmp	r3, #15
 800335c:	f67f af64 	bls.w	8003228 <GPIO_Init+0xc4>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40020000 	.word	0x40020000
 800336c:	40020400 	.word	0x40020400
 8003370:	40020800 	.word	0x40020800
 8003374:	40020c00 	.word	0x40020c00
 8003378:	40021000 	.word	0x40021000
 800337c:	40021400 	.word	0x40021400
 8003380:	40021800 	.word	0x40021800
 8003384:	40021c00 	.word	0x40021c00
 8003388:	40022000 	.word	0x40022000
 800338c:	08004258 	.word	0x08004258

08003390 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	460a      	mov	r2, r1
 800339c:	807a      	strh	r2, [r7, #2]
 800339e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	4b83      	ldr	r3, [pc, #524]	; (80035b8 <GPIO_PinAFConfig+0x228>)
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d024      	beq.n	80033fa <GPIO_PinAFConfig+0x6a>
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4b82      	ldr	r3, [pc, #520]	; (80035bc <GPIO_PinAFConfig+0x22c>)
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d020      	beq.n	80033fa <GPIO_PinAFConfig+0x6a>
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	4b81      	ldr	r3, [pc, #516]	; (80035c0 <GPIO_PinAFConfig+0x230>)
 80033bc:	429a      	cmp	r2, r3
 80033be:	d01c      	beq.n	80033fa <GPIO_PinAFConfig+0x6a>
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4b80      	ldr	r3, [pc, #512]	; (80035c4 <GPIO_PinAFConfig+0x234>)
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d018      	beq.n	80033fa <GPIO_PinAFConfig+0x6a>
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4b7f      	ldr	r3, [pc, #508]	; (80035c8 <GPIO_PinAFConfig+0x238>)
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d014      	beq.n	80033fa <GPIO_PinAFConfig+0x6a>
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	4b7e      	ldr	r3, [pc, #504]	; (80035cc <GPIO_PinAFConfig+0x23c>)
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d010      	beq.n	80033fa <GPIO_PinAFConfig+0x6a>
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	4b7d      	ldr	r3, [pc, #500]	; (80035d0 <GPIO_PinAFConfig+0x240>)
 80033dc:	429a      	cmp	r2, r3
 80033de:	d00c      	beq.n	80033fa <GPIO_PinAFConfig+0x6a>
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4b7c      	ldr	r3, [pc, #496]	; (80035d4 <GPIO_PinAFConfig+0x244>)
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d008      	beq.n	80033fa <GPIO_PinAFConfig+0x6a>
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4b7b      	ldr	r3, [pc, #492]	; (80035d8 <GPIO_PinAFConfig+0x248>)
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d004      	beq.n	80033fa <GPIO_PinAFConfig+0x6a>
 80033f0:	487a      	ldr	r0, [pc, #488]	; (80035dc <GPIO_PinAFConfig+0x24c>)
 80033f2:	f240 2117 	movw	r1, #535	; 0x217
 80033f6:	f7fd fc95 	bl	8000d24 <assert_failed>
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
 80033fa:	887b      	ldrh	r3, [r7, #2]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d031      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 8003400:	887b      	ldrh	r3, [r7, #2]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d02e      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 8003406:	887b      	ldrh	r3, [r7, #2]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d02b      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 800340c:	887b      	ldrh	r3, [r7, #2]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d028      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 8003412:	887b      	ldrh	r3, [r7, #2]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d025      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 8003418:	887b      	ldrh	r3, [r7, #2]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d022      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 800341e:	887b      	ldrh	r3, [r7, #2]
 8003420:	2b06      	cmp	r3, #6
 8003422:	d01f      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 8003424:	887b      	ldrh	r3, [r7, #2]
 8003426:	2b07      	cmp	r3, #7
 8003428:	d01c      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d019      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 8003430:	887b      	ldrh	r3, [r7, #2]
 8003432:	2b09      	cmp	r3, #9
 8003434:	d016      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 8003436:	887b      	ldrh	r3, [r7, #2]
 8003438:	2b0a      	cmp	r3, #10
 800343a:	d013      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	2b0b      	cmp	r3, #11
 8003440:	d010      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 8003442:	887b      	ldrh	r3, [r7, #2]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d00d      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 8003448:	887b      	ldrh	r3, [r7, #2]
 800344a:	2b0d      	cmp	r3, #13
 800344c:	d00a      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	2b0e      	cmp	r3, #14
 8003452:	d007      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	d004      	beq.n	8003464 <GPIO_PinAFConfig+0xd4>
 800345a:	4860      	ldr	r0, [pc, #384]	; (80035dc <GPIO_PinAFConfig+0x24c>)
 800345c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8003460:	f7fd fc60 	bl	8000d24 <assert_failed>
  assert_param(IS_GPIO_AF(GPIO_AF));
 8003464:	787b      	ldrb	r3, [r7, #1]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d06d      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 800346a:	787b      	ldrb	r3, [r7, #1]
 800346c:	2b09      	cmp	r3, #9
 800346e:	d06a      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003470:	787b      	ldrb	r3, [r7, #1]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d067      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003476:	787b      	ldrb	r3, [r7, #1]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d064      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d061      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003482:	787b      	ldrb	r3, [r7, #1]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05e      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003488:	787b      	ldrb	r3, [r7, #1]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d05b      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 800348e:	787b      	ldrb	r3, [r7, #1]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d058      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003494:	787b      	ldrb	r3, [r7, #1]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d055      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 800349a:	787b      	ldrb	r3, [r7, #1]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d052      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034a0:	787b      	ldrb	r3, [r7, #1]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d04f      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034a6:	787b      	ldrb	r3, [r7, #1]
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d04c      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034ac:	787b      	ldrb	r3, [r7, #1]
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d049      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034b2:	787b      	ldrb	r3, [r7, #1]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d046      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034b8:	787b      	ldrb	r3, [r7, #1]
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d043      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034be:	787b      	ldrb	r3, [r7, #1]
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d040      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034c4:	787b      	ldrb	r3, [r7, #1]
 80034c6:	2b05      	cmp	r3, #5
 80034c8:	d03d      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034ca:	787b      	ldrb	r3, [r7, #1]
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d03a      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034d0:	787b      	ldrb	r3, [r7, #1]
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d037      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034d6:	787b      	ldrb	r3, [r7, #1]
 80034d8:	2b09      	cmp	r3, #9
 80034da:	d034      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034dc:	787b      	ldrb	r3, [r7, #1]
 80034de:	2b07      	cmp	r3, #7
 80034e0:	d031      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034e2:	787b      	ldrb	r3, [r7, #1]
 80034e4:	2b07      	cmp	r3, #7
 80034e6:	d02e      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034e8:	787b      	ldrb	r3, [r7, #1]
 80034ea:	2b07      	cmp	r3, #7
 80034ec:	d02b      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034ee:	787b      	ldrb	r3, [r7, #1]
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d028      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034f4:	787b      	ldrb	r3, [r7, #1]
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d025      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 80034fa:	787b      	ldrb	r3, [r7, #1]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d022      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003500:	787b      	ldrb	r3, [r7, #1]
 8003502:	2b09      	cmp	r3, #9
 8003504:	d01f      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003506:	787b      	ldrb	r3, [r7, #1]
 8003508:	2b09      	cmp	r3, #9
 800350a:	d01c      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 800350c:	787b      	ldrb	r3, [r7, #1]
 800350e:	2b0a      	cmp	r3, #10
 8003510:	d019      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003512:	787b      	ldrb	r3, [r7, #1]
 8003514:	2b0a      	cmp	r3, #10
 8003516:	d016      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003518:	787b      	ldrb	r3, [r7, #1]
 800351a:	2b0b      	cmp	r3, #11
 800351c:	d013      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 800351e:	787b      	ldrb	r3, [r7, #1]
 8003520:	2b0c      	cmp	r3, #12
 8003522:	d010      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d00d      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 800352a:	787b      	ldrb	r3, [r7, #1]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	d00a      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003530:	787b      	ldrb	r3, [r7, #1]
 8003532:	2b0d      	cmp	r3, #13
 8003534:	d007      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 8003536:	787b      	ldrb	r3, [r7, #1]
 8003538:	2b0f      	cmp	r3, #15
 800353a:	d004      	beq.n	8003546 <GPIO_PinAFConfig+0x1b6>
 800353c:	4827      	ldr	r0, [pc, #156]	; (80035dc <GPIO_PinAFConfig+0x24c>)
 800353e:	f240 2119 	movw	r1, #537	; 0x219
 8003542:	f7fd fbef 	bl	8000d24 <assert_failed>
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003546:	787a      	ldrb	r2, [r7, #1]
 8003548:	887b      	ldrh	r3, [r7, #2]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	08db      	lsrs	r3, r3, #3
 800355a:	b29b      	uxth	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	887b      	ldrh	r3, [r7, #2]
 8003560:	08db      	lsrs	r3, r3, #3
 8003562:	b29b      	uxth	r3, r3
 8003564:	4619      	mov	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3108      	adds	r1, #8
 800356a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	200f      	movs	r0, #15
 8003578:	fa00 f303 	lsl.w	r3, r0, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	4019      	ands	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3208      	adds	r2, #8
 8003584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003588:	887b      	ldrh	r3, [r7, #2]
 800358a:	08db      	lsrs	r3, r3, #3
 800358c:	b29b      	uxth	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3208      	adds	r2, #8
 8003594:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	08db      	lsrs	r3, r3, #3
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3208      	adds	r2, #8
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40020000 	.word	0x40020000
 80035bc:	40020400 	.word	0x40020400
 80035c0:	40020800 	.word	0x40020800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40021400 	.word	0x40021400
 80035d0:	40021800 	.word	0x40021800
 80035d4:	40021c00 	.word	0x40021c00
 80035d8:	40022000 	.word	0x40022000
 80035dc:	08004258 	.word	0x08004258

080035e0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	2300      	movs	r3, #0
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	2302      	movs	r3, #2
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	2302      	movs	r3, #2
 80035fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003600:	4b48      	ldr	r3, [pc, #288]	; (8003724 <RCC_GetClocksFreq+0x144>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b04      	cmp	r3, #4
 800360e:	d007      	beq.n	8003620 <RCC_GetClocksFreq+0x40>
 8003610:	2b08      	cmp	r3, #8
 8003612:	d009      	beq.n	8003628 <RCC_GetClocksFreq+0x48>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d13f      	bne.n	8003698 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a43      	ldr	r2, [pc, #268]	; (8003728 <RCC_GetClocksFreq+0x148>)
 800361c:	601a      	str	r2, [r3, #0]
      break;
 800361e:	e03f      	b.n	80036a0 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a42      	ldr	r2, [pc, #264]	; (800372c <RCC_GetClocksFreq+0x14c>)
 8003624:	601a      	str	r2, [r3, #0]
      break;
 8003626:	e03b      	b.n	80036a0 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003628:	4b3e      	ldr	r3, [pc, #248]	; (8003724 <RCC_GetClocksFreq+0x144>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003630:	0d9b      	lsrs	r3, r3, #22
 8003632:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003634:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <RCC_GetClocksFreq+0x144>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363c:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00d      	beq.n	8003660 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003644:	4a39      	ldr	r2, [pc, #228]	; (800372c <RCC_GetClocksFreq+0x14c>)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	fbb2 f2f3 	udiv	r2, r2, r3
 800364c:	4b35      	ldr	r3, [pc, #212]	; (8003724 <RCC_GetClocksFreq+0x144>)
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003654:	400b      	ands	r3, r1
 8003656:	099b      	lsrs	r3, r3, #6
 8003658:	fb03 f302 	mul.w	r3, r3, r2
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	e00c      	b.n	800367a <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003660:	4a31      	ldr	r2, [pc, #196]	; (8003728 <RCC_GetClocksFreq+0x148>)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	fbb2 f2f3 	udiv	r2, r2, r3
 8003668:	4b2e      	ldr	r3, [pc, #184]	; (8003724 <RCC_GetClocksFreq+0x144>)
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003670:	400b      	ands	r3, r1
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	fb03 f302 	mul.w	r3, r3, r2
 8003678:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800367a:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <RCC_GetClocksFreq+0x144>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003682:	0c1b      	lsrs	r3, r3, #16
 8003684:	3301      	adds	r3, #1
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	601a      	str	r2, [r3, #0]
      break;
 8003696:	e003      	b.n	80036a0 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a23      	ldr	r2, [pc, #140]	; (8003728 <RCC_GetClocksFreq+0x148>)
 800369c:	601a      	str	r2, [r3, #0]
      break;
 800369e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80036a0:	4b20      	ldr	r3, [pc, #128]	; (8003724 <RCC_GetClocksFreq+0x144>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80036b0:	4a1f      	ldr	r2, [pc, #124]	; (8003730 <RCC_GetClocksFreq+0x150>)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	4413      	add	r3, r2
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	40da      	lsrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80036c8:	4b16      	ldr	r3, [pc, #88]	; (8003724 <RCC_GetClocksFreq+0x144>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80036d0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	0a9b      	lsrs	r3, r3, #10
 80036d6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <RCC_GetClocksFreq+0x150>)
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	4413      	add	r3, r2
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	40da      	lsrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <RCC_GetClocksFreq+0x144>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80036f8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	0b5b      	lsrs	r3, r3, #13
 80036fe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003700:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <RCC_GetClocksFreq+0x150>)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	4413      	add	r3, r2
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	40da      	lsrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	60da      	str	r2, [r3, #12]
}
 8003718:	3724      	adds	r7, #36	; 0x24
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	00f42400 	.word	0x00f42400
 800372c:	017d7840 	.word	0x017d7840
 8003730:	2000001c 	.word	0x2000001c

08003734 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <RCC_AHB1PeriphClockCmd+0x64>)
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d102      	bne.n	8003750 <RCC_AHB1PeriphClockCmd+0x1c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <RCC_AHB1PeriphClockCmd+0x26>
 8003750:	4812      	ldr	r0, [pc, #72]	; (800379c <RCC_AHB1PeriphClockCmd+0x68>)
 8003752:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003756:	f7fd fae5 	bl	8000d24 <assert_failed>

  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <RCC_AHB1PeriphClockCmd+0x3c>
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d004      	beq.n	8003770 <RCC_AHB1PeriphClockCmd+0x3c>
 8003766:	480d      	ldr	r0, [pc, #52]	; (800379c <RCC_AHB1PeriphClockCmd+0x68>)
 8003768:	f240 4142 	movw	r1, #1090	; 0x442
 800376c:	f7fd fada 	bl	8000d24 <assert_failed>
  if (NewState != DISABLE)
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d006      	beq.n	8003784 <RCC_AHB1PeriphClockCmd+0x50>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <RCC_AHB1PeriphClockCmd+0x6c>)
 8003778:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <RCC_AHB1PeriphClockCmd+0x6c>)
 800377a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	430a      	orrs	r2, r1
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
 8003782:	e006      	b.n	8003792 <RCC_AHB1PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <RCC_AHB1PeriphClockCmd+0x6c>)
 8003786:	4a06      	ldr	r2, [pc, #24]	; (80037a0 <RCC_AHB1PeriphClockCmd+0x6c>)
 8003788:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	43d2      	mvns	r2, r2
 800378e:	400a      	ands	r2, r1
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	818bee00 	.word	0x818bee00
 800379c:	080042a8 	.word	0x080042a8
 80037a0:	40023800 	.word	0x40023800

080037a4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <RCC_APB2PeriphClockCmd+0x64>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <RCC_APB2PeriphClockCmd+0x1c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d104      	bne.n	80037ca <RCC_APB2PeriphClockCmd+0x26>
 80037c0:	4812      	ldr	r0, [pc, #72]	; (800380c <RCC_APB2PeriphClockCmd+0x68>)
 80037c2:	f240 41d5 	movw	r1, #1237	; 0x4d5
 80037c6:	f7fd faad 	bl	8000d24 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <RCC_APB2PeriphClockCmd+0x3c>
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d004      	beq.n	80037e0 <RCC_APB2PeriphClockCmd+0x3c>
 80037d6:	480d      	ldr	r0, [pc, #52]	; (800380c <RCC_APB2PeriphClockCmd+0x68>)
 80037d8:	f240 41d6 	movw	r1, #1238	; 0x4d6
 80037dc:	f7fd faa2 	bl	8000d24 <assert_failed>

  if (NewState != DISABLE)
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <RCC_APB2PeriphClockCmd+0x50>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <RCC_APB2PeriphClockCmd+0x6c>)
 80037e8:	4a09      	ldr	r2, [pc, #36]	; (8003810 <RCC_APB2PeriphClockCmd+0x6c>)
 80037ea:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
 80037f2:	e006      	b.n	8003802 <RCC_APB2PeriphClockCmd+0x5e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <RCC_APB2PeriphClockCmd+0x6c>)
 80037f6:	4a06      	ldr	r2, [pc, #24]	; (8003810 <RCC_APB2PeriphClockCmd+0x6c>)
 80037f8:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	43d2      	mvns	r2, r2
 80037fe:	400a      	ands	r2, r1
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	fff8a0cc 	.word	0xfff8a0cc
 800380c:	080042a8 	.word	0x080042a8
 8003810:	40023800 	.word	0x40023800

08003814 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	; 0x28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800381e:	2300      	movs	r3, #0
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
 8003822:	2300      	movs	r3, #0
 8003824:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800382a:	2300      	movs	r3, #0
 800382c:	61bb      	str	r3, [r7, #24]
  RCC_ClocksTypeDef RCC_ClocksStatus;

  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4b97      	ldr	r3, [pc, #604]	; (8003a90 <USART_Init+0x27c>)
 8003832:	429a      	cmp	r2, r3
 8003834:	d017      	beq.n	8003866 <USART_Init+0x52>
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4b96      	ldr	r3, [pc, #600]	; (8003a94 <USART_Init+0x280>)
 800383a:	429a      	cmp	r2, r3
 800383c:	d013      	beq.n	8003866 <USART_Init+0x52>
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4b95      	ldr	r3, [pc, #596]	; (8003a98 <USART_Init+0x284>)
 8003842:	429a      	cmp	r2, r3
 8003844:	d00f      	beq.n	8003866 <USART_Init+0x52>
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4b94      	ldr	r3, [pc, #592]	; (8003a9c <USART_Init+0x288>)
 800384a:	429a      	cmp	r2, r3
 800384c:	d00b      	beq.n	8003866 <USART_Init+0x52>
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4b93      	ldr	r3, [pc, #588]	; (8003aa0 <USART_Init+0x28c>)
 8003852:	429a      	cmp	r2, r3
 8003854:	d007      	beq.n	8003866 <USART_Init+0x52>
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4b92      	ldr	r3, [pc, #584]	; (8003aa4 <USART_Init+0x290>)
 800385a:	429a      	cmp	r2, r3
 800385c:	d003      	beq.n	8003866 <USART_Init+0x52>
 800385e:	4892      	ldr	r0, [pc, #584]	; (8003aa8 <USART_Init+0x294>)
 8003860:	21eb      	movs	r1, #235	; 0xeb
 8003862:	f7fd fa5f 	bl	8000d24 <assert_failed>
  assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <USART_Init+0x64>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4b8e      	ldr	r3, [pc, #568]	; (8003aac <USART_Init+0x298>)
 8003874:	429a      	cmp	r2, r3
 8003876:	d903      	bls.n	8003880 <USART_Init+0x6c>
 8003878:	488b      	ldr	r0, [pc, #556]	; (8003aa8 <USART_Init+0x294>)
 800387a:	21ec      	movs	r1, #236	; 0xec
 800387c:	f7fd fa52 	bl	8000d24 <assert_failed>
  assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	889b      	ldrh	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <USART_Init+0x86>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	889b      	ldrh	r3, [r3, #4]
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003890:	d003      	beq.n	800389a <USART_Init+0x86>
 8003892:	4885      	ldr	r0, [pc, #532]	; (8003aa8 <USART_Init+0x294>)
 8003894:	21ed      	movs	r1, #237	; 0xed
 8003896:	f7fd fa45 	bl	8000d24 <assert_failed>
  assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	88db      	ldrh	r3, [r3, #6]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d012      	beq.n	80038c8 <USART_Init+0xb4>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	88db      	ldrh	r3, [r3, #6]
 80038a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038aa:	d00d      	beq.n	80038c8 <USART_Init+0xb4>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	88db      	ldrh	r3, [r3, #6]
 80038b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b4:	d008      	beq.n	80038c8 <USART_Init+0xb4>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	88db      	ldrh	r3, [r3, #6]
 80038ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038be:	d003      	beq.n	80038c8 <USART_Init+0xb4>
 80038c0:	4879      	ldr	r0, [pc, #484]	; (8003aa8 <USART_Init+0x294>)
 80038c2:	21ee      	movs	r1, #238	; 0xee
 80038c4:	f7fd fa2e 	bl	8000d24 <assert_failed>
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	891b      	ldrh	r3, [r3, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <USART_Init+0xd8>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	891b      	ldrh	r3, [r3, #8]
 80038d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d8:	d008      	beq.n	80038ec <USART_Init+0xd8>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	891b      	ldrh	r3, [r3, #8]
 80038de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038e2:	d003      	beq.n	80038ec <USART_Init+0xd8>
 80038e4:	4870      	ldr	r0, [pc, #448]	; (8003aa8 <USART_Init+0x294>)
 80038e6:	21ef      	movs	r1, #239	; 0xef
 80038e8:	f7fd fa1c 	bl	8000d24 <assert_failed>
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	895b      	ldrh	r3, [r3, #10]
 80038f0:	461a      	mov	r2, r3
 80038f2:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d103      	bne.n	8003904 <USART_Init+0xf0>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	895b      	ldrh	r3, [r3, #10]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d103      	bne.n	800390c <USART_Init+0xf8>
 8003904:	4868      	ldr	r0, [pc, #416]	; (8003aa8 <USART_Init+0x294>)
 8003906:	21f0      	movs	r1, #240	; 0xf0
 8003908:	f7fd fa0c 	bl	8000d24 <assert_failed>
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	899b      	ldrh	r3, [r3, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d012      	beq.n	800393a <USART_Init+0x126>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	899b      	ldrh	r3, [r3, #12]
 8003918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391c:	d00d      	beq.n	800393a <USART_Init+0x126>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	899b      	ldrh	r3, [r3, #12]
 8003922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003926:	d008      	beq.n	800393a <USART_Init+0x126>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	899b      	ldrh	r3, [r3, #12]
 800392c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003930:	d003      	beq.n	800393a <USART_Init+0x126>
 8003932:	485d      	ldr	r0, [pc, #372]	; (8003aa8 <USART_Init+0x294>)
 8003934:	21f1      	movs	r1, #241	; 0xf1
 8003936:	f7fd f9f5 	bl	8000d24 <assert_failed>

  /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	899b      	ldrh	r3, [r3, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d013      	beq.n	800396a <USART_Init+0x156>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4b52      	ldr	r3, [pc, #328]	; (8003a90 <USART_Init+0x27c>)
 8003946:	429a      	cmp	r2, r3
 8003948:	d00f      	beq.n	800396a <USART_Init+0x156>
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	4b51      	ldr	r3, [pc, #324]	; (8003a94 <USART_Init+0x280>)
 800394e:	429a      	cmp	r2, r3
 8003950:	d00b      	beq.n	800396a <USART_Init+0x156>
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4b50      	ldr	r3, [pc, #320]	; (8003a98 <USART_Init+0x284>)
 8003956:	429a      	cmp	r2, r3
 8003958:	d007      	beq.n	800396a <USART_Init+0x156>
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4b51      	ldr	r3, [pc, #324]	; (8003aa4 <USART_Init+0x290>)
 800395e:	429a      	cmp	r2, r3
 8003960:	d003      	beq.n	800396a <USART_Init+0x156>
 8003962:	4851      	ldr	r0, [pc, #324]	; (8003aa8 <USART_Init+0x294>)
 8003964:	21f6      	movs	r1, #246	; 0xf6
 8003966:	f7fd f9dd 	bl	8000d24 <assert_failed>
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8a1b      	ldrh	r3, [r3, #16]
 800396e:	b29b      	uxth	r3, r3
 8003970:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003978:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	88db      	ldrh	r3, [r3, #6]
 800397e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003980:	4313      	orrs	r3, r2
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	b29a      	uxth	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	899b      	ldrh	r3, [r3, #12]
 8003990:	b29b      	uxth	r3, r3
 8003992:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800399a:	f023 030c 	bic.w	r3, r3, #12
 800399e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	889a      	ldrh	r2, [r3, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	891b      	ldrh	r3, [r3, #8]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80039b0:	4313      	orrs	r3, r2
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b6:	4313      	orrs	r3, r2
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	b29a      	uxth	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8a9b      	ldrh	r3, [r3, #20]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	899b      	ldrh	r3, [r3, #12]
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	4313      	orrs	r3, r2
 80039da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	b29a      	uxth	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80039e4:	f107 0308 	add.w	r3, r7, #8
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff fdf9 	bl	80035e0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <USART_Init+0x27c>)
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d003      	beq.n	80039fe <USART_Init+0x1ea>
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4b2a      	ldr	r3, [pc, #168]	; (8003aa4 <USART_Init+0x290>)
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d102      	bne.n	8003a04 <USART_Init+0x1f0>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	623b      	str	r3, [r7, #32]
 8003a02:	e001      	b.n	8003a08 <USART_Init+0x1f4>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	899b      	ldrh	r3, [r3, #12]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	b21b      	sxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	da0c      	bge.n	8003a30 <USART_Init+0x21c>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8003a16:	6a3a      	ldr	r2, [r7, #32]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009a      	lsls	r2, r3, #2
 8003a20:	441a      	add	r2, r3
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	e00b      	b.n	8003a48 <USART_Init+0x234>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8003a30:	6a3a      	ldr	r2, [r7, #32]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009a      	lsls	r2, r3, #2
 8003a3a:	441a      	add	r2, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <USART_Init+0x29c>)
 8003a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	2264      	movs	r2, #100	; 0x64
 8003a5c:	fb02 f303 	mul.w	r3, r2, r3
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	899b      	ldrh	r3, [r3, #12]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	b21b      	sxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	da1f      	bge.n	8003ab4 <USART_Init+0x2a0>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <USART_Init+0x29c>)
 8003a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8e:	e01e      	b.n	8003ace <USART_Init+0x2ba>
 8003a90:	40011000 	.word	0x40011000
 8003a94:	40004400 	.word	0x40004400
 8003a98:	40004800 	.word	0x40004800
 8003a9c:	40004c00 	.word	0x40004c00
 8003aa0:	40005000 	.word	0x40005000
 8003aa4:	40011400 	.word	0x40011400
 8003aa8:	080042f8 	.word	0x080042f8
 8003aac:	007270e0 	.word	0x007270e0
 8003ab0:	51eb851f 	.word	0x51eb851f
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <USART_Init+0x2c8>)
 8003abe:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aca:	4313      	orrs	r3, r2
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	811a      	strh	r2, [r3, #8]
}
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	51eb851f 	.word	0x51eb851f

08003ae0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4b1f      	ldr	r3, [pc, #124]	; (8003b6c <USART_Cmd+0x8c>)
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d018      	beq.n	8003b26 <USART_Cmd+0x46>
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4b1e      	ldr	r3, [pc, #120]	; (8003b70 <USART_Cmd+0x90>)
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d014      	beq.n	8003b26 <USART_Cmd+0x46>
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <USART_Cmd+0x94>)
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d010      	beq.n	8003b26 <USART_Cmd+0x46>
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <USART_Cmd+0x98>)
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d00c      	beq.n	8003b26 <USART_Cmd+0x46>
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <USART_Cmd+0x9c>)
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d008      	beq.n	8003b26 <USART_Cmd+0x46>
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <USART_Cmd+0xa0>)
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d004      	beq.n	8003b26 <USART_Cmd+0x46>
 8003b1c:	4819      	ldr	r0, [pc, #100]	; (8003b84 <USART_Cmd+0xa4>)
 8003b1e:	f240 119b 	movw	r1, #411	; 0x19b
 8003b22:	f7fd f8ff 	bl	8000d24 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <USART_Cmd+0x5c>
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d004      	beq.n	8003b3c <USART_Cmd+0x5c>
 8003b32:	4814      	ldr	r0, [pc, #80]	; (8003b84 <USART_Cmd+0xa4>)
 8003b34:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003b38:	f7fd f8f4 	bl	8000d24 <assert_failed>
  
  if (NewState != DISABLE)
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <USART_Cmd+0x74>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	899b      	ldrh	r3, [r3, #12]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	819a      	strh	r2, [r3, #12]
 8003b52:	e007      	b.n	8003b64 <USART_Cmd+0x84>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	899b      	ldrh	r3, [r3, #12]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	819a      	strh	r2, [r3, #12]
  }
}
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40011000 	.word	0x40011000
 8003b70:	40004400 	.word	0x40004400
 8003b74:	40004800 	.word	0x40004800
 8003b78:	40004c00 	.word	0x40004c00
 8003b7c:	40005000 	.word	0x40005000
 8003b80:	40011400 	.word	0x40011400
 8003b84:	080042f8 	.word	0x080042f8

08003b88 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <USART_SendData+0x6c>)
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d018      	beq.n	8003bce <USART_SendData+0x46>
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4b16      	ldr	r3, [pc, #88]	; (8003bf8 <USART_SendData+0x70>)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d014      	beq.n	8003bce <USART_SendData+0x46>
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <USART_SendData+0x74>)
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d010      	beq.n	8003bce <USART_SendData+0x46>
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <USART_SendData+0x78>)
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d00c      	beq.n	8003bce <USART_SendData+0x46>
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <USART_SendData+0x7c>)
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d008      	beq.n	8003bce <USART_SendData+0x46>
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <USART_SendData+0x80>)
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d004      	beq.n	8003bce <USART_SendData+0x46>
 8003bc4:	4811      	ldr	r0, [pc, #68]	; (8003c0c <USART_SendData+0x84>)
 8003bc6:	f240 211d 	movw	r1, #541	; 0x21d
 8003bca:	f7fd f8ab 	bl	8000d24 <assert_failed>
  assert_param(IS_USART_DATA(Data)); 
 8003bce:	887b      	ldrh	r3, [r7, #2]
 8003bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd4:	d304      	bcc.n	8003be0 <USART_SendData+0x58>
 8003bd6:	480d      	ldr	r0, [pc, #52]	; (8003c0c <USART_SendData+0x84>)
 8003bd8:	f240 211e 	movw	r1, #542	; 0x21e
 8003bdc:	f7fd f8a2 	bl	8000d24 <assert_failed>
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8003be0:	887b      	ldrh	r3, [r7, #2]
 8003be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	809a      	strh	r2, [r3, #4]
}
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40011000 	.word	0x40011000
 8003bf8:	40004400 	.word	0x40004400
 8003bfc:	40004800 	.word	0x40004800
 8003c00:	40004c00 	.word	0x40004c00
 8003c04:	40005000 	.word	0x40005000
 8003c08:	40011400 	.word	0x40011400
 8003c0c:	080042f8 	.word	0x080042f8

08003c10 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	807a      	strh	r2, [r7, #2]
 8003c1e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4b4f      	ldr	r3, [pc, #316]	; (8003d70 <USART_ITConfig+0x160>)
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d018      	beq.n	8003c6a <USART_ITConfig+0x5a>
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <USART_ITConfig+0x164>)
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d014      	beq.n	8003c6a <USART_ITConfig+0x5a>
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4b4d      	ldr	r3, [pc, #308]	; (8003d78 <USART_ITConfig+0x168>)
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d010      	beq.n	8003c6a <USART_ITConfig+0x5a>
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4b4c      	ldr	r3, [pc, #304]	; (8003d7c <USART_ITConfig+0x16c>)
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d00c      	beq.n	8003c6a <USART_ITConfig+0x5a>
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4b4b      	ldr	r3, [pc, #300]	; (8003d80 <USART_ITConfig+0x170>)
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d008      	beq.n	8003c6a <USART_ITConfig+0x5a>
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4b4a      	ldr	r3, [pc, #296]	; (8003d84 <USART_ITConfig+0x174>)
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d004      	beq.n	8003c6a <USART_ITConfig+0x5a>
 8003c60:	4849      	ldr	r0, [pc, #292]	; (8003d88 <USART_ITConfig+0x178>)
 8003c62:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8003c66:	f7fd f85d 	bl	8000d24 <assert_failed>
  assert_param(IS_USART_CONFIG_IT(USART_IT));
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	2b28      	cmp	r3, #40	; 0x28
 8003c6e:	d025      	beq.n	8003cbc <USART_ITConfig+0xac>
 8003c70:	887a      	ldrh	r2, [r7, #2]
 8003c72:	f240 7327 	movw	r3, #1831	; 0x727
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d020      	beq.n	8003cbc <USART_ITConfig+0xac>
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	f240 6326 	movw	r3, #1574	; 0x626
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d01b      	beq.n	8003cbc <USART_ITConfig+0xac>
 8003c84:	887a      	ldrh	r2, [r7, #2]
 8003c86:	f240 5325 	movw	r3, #1317	; 0x525
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d016      	beq.n	8003cbc <USART_ITConfig+0xac>
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	f240 4324 	movw	r3, #1060	; 0x424
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d011      	beq.n	8003cbc <USART_ITConfig+0xac>
 8003c98:	887a      	ldrh	r2, [r7, #2]
 8003c9a:	f640 0346 	movw	r3, #2118	; 0x846
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d00c      	beq.n	8003cbc <USART_ITConfig+0xac>
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	f640 136a 	movw	r3, #2410	; 0x96a
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d007      	beq.n	8003cbc <USART_ITConfig+0xac>
 8003cac:	887b      	ldrh	r3, [r7, #2]
 8003cae:	2b60      	cmp	r3, #96	; 0x60
 8003cb0:	d004      	beq.n	8003cbc <USART_ITConfig+0xac>
 8003cb2:	4835      	ldr	r0, [pc, #212]	; (8003d88 <USART_ITConfig+0x178>)
 8003cb4:	f240 41be 	movw	r1, #1214	; 0x4be
 8003cb8:	f7fd f834 	bl	8000d24 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8003cbc:	787b      	ldrb	r3, [r7, #1]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d007      	beq.n	8003cd2 <USART_ITConfig+0xc2>
 8003cc2:	787b      	ldrb	r3, [r7, #1]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d004      	beq.n	8003cd2 <USART_ITConfig+0xc2>
 8003cc8:	482f      	ldr	r0, [pc, #188]	; (8003d88 <USART_ITConfig+0x178>)
 8003cca:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8003cce:	f7fd f829 	bl	8000d24 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */
  if (USART_IT == USART_IT_CTS)
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	f640 136a 	movw	r3, #2410	; 0x96a
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d114      	bne.n	8003d06 <USART_ITConfig+0xf6>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <USART_ITConfig+0x160>)
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d010      	beq.n	8003d06 <USART_ITConfig+0xf6>
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <USART_ITConfig+0x164>)
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d00c      	beq.n	8003d06 <USART_ITConfig+0xf6>
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <USART_ITConfig+0x168>)
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d008      	beq.n	8003d06 <USART_ITConfig+0xf6>
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	4b23      	ldr	r3, [pc, #140]	; (8003d84 <USART_ITConfig+0x174>)
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d004      	beq.n	8003d06 <USART_ITConfig+0xf6>
 8003cfc:	4822      	ldr	r0, [pc, #136]	; (8003d88 <USART_ITConfig+0x178>)
 8003cfe:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8003d02:	f7fd f80f 	bl	8000d24 <assert_failed>
  } 
    
  usartxbase = (uint32_t)USARTx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003d0a:	887b      	ldrh	r3, [r7, #2]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d103      	bne.n	8003d34 <USART_ITConfig+0x124>
  {
    usartxbase += 0x0C;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	330c      	adds	r3, #12
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e009      	b.n	8003d48 <USART_ITConfig+0x138>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d103      	bne.n	8003d42 <USART_ITConfig+0x132>
  {
    usartxbase += 0x10;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e002      	b.n	8003d48 <USART_ITConfig+0x138>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3314      	adds	r3, #20
 8003d46:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8003d48:	787b      	ldrb	r3, [r7, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d006      	beq.n	8003d5c <USART_ITConfig+0x14c>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	6811      	ldr	r1, [r2, #0]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e006      	b.n	8003d6a <USART_ITConfig+0x15a>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	6811      	ldr	r1, [r2, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	43d2      	mvns	r2, r2
 8003d66:	400a      	ands	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]
  }
}
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40011000 	.word	0x40011000
 8003d74:	40004400 	.word	0x40004400
 8003d78:	40004800 	.word	0x40004800
 8003d7c:	40004c00 	.word	0x40004c00
 8003d80:	40005000 	.word	0x40005000
 8003d84:	40011400 	.word	0x40011400
 8003d88:	080042f8 	.word	0x080042f8

08003d8c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8003da4:	2300      	movs	r3, #0
 8003da6:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4b5c      	ldr	r3, [pc, #368]	; (8003f1c <USART_GetITStatus+0x190>)
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d018      	beq.n	8003de2 <USART_GetITStatus+0x56>
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	4b5b      	ldr	r3, [pc, #364]	; (8003f20 <USART_GetITStatus+0x194>)
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d014      	beq.n	8003de2 <USART_GetITStatus+0x56>
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4b5a      	ldr	r3, [pc, #360]	; (8003f24 <USART_GetITStatus+0x198>)
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d010      	beq.n	8003de2 <USART_GetITStatus+0x56>
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <USART_GetITStatus+0x19c>)
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d00c      	beq.n	8003de2 <USART_GetITStatus+0x56>
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4b58      	ldr	r3, [pc, #352]	; (8003f2c <USART_GetITStatus+0x1a0>)
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d008      	beq.n	8003de2 <USART_GetITStatus+0x56>
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4b57      	ldr	r3, [pc, #348]	; (8003f30 <USART_GetITStatus+0x1a4>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d004      	beq.n	8003de2 <USART_GetITStatus+0x56>
 8003dd8:	4856      	ldr	r0, [pc, #344]	; (8003f34 <USART_GetITStatus+0x1a8>)
 8003dda:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 8003dde:	f7fc ffa1 	bl	8000d24 <assert_failed>
  assert_param(IS_USART_GET_IT(USART_IT)); 
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	2b28      	cmp	r3, #40	; 0x28
 8003de6:	d037      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003de8:	887a      	ldrh	r2, [r7, #2]
 8003dea:	f240 7327 	movw	r3, #1831	; 0x727
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d032      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	f240 6326 	movw	r3, #1574	; 0x626
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d02d      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003dfc:	887a      	ldrh	r2, [r7, #2]
 8003dfe:	f240 5325 	movw	r3, #1317	; 0x525
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d028      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003e06:	887a      	ldrh	r2, [r7, #2]
 8003e08:	f240 4324 	movw	r3, #1060	; 0x424
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d023      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003e10:	887a      	ldrh	r2, [r7, #2]
 8003e12:	f640 0346 	movw	r3, #2118	; 0x846
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d01e      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	f640 136a 	movw	r3, #2410	; 0x96a
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d019      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8003e2a:	d015      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003e2c:	887a      	ldrh	r2, [r7, #2]
 8003e2e:	f240 3325 	movw	r3, #805	; 0x325
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d010      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003e36:	887b      	ldrh	r3, [r7, #2]
 8003e38:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
 8003e3c:	d00c      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003e3e:	887b      	ldrh	r3, [r7, #2]
 8003e40:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8003e44:	d008      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003e46:	887b      	ldrh	r3, [r7, #2]
 8003e48:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 8003e4c:	d004      	beq.n	8003e58 <USART_GetITStatus+0xcc>
 8003e4e:	4839      	ldr	r0, [pc, #228]	; (8003f34 <USART_GetITStatus+0x1a8>)
 8003e50:	f240 5151 	movw	r1, #1361	; 0x551
 8003e54:	f7fc ff66 	bl	8000d24 <assert_failed>

  /* The CTS interrupt is not available for UART4 and UART5 */ 
  if (USART_IT == USART_IT_CTS)
 8003e58:	887a      	ldrh	r2, [r7, #2]
 8003e5a:	f640 136a 	movw	r3, #2410	; 0x96a
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d114      	bne.n	8003e8c <USART_GetITStatus+0x100>
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <USART_GetITStatus+0x190>)
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d010      	beq.n	8003e8c <USART_GetITStatus+0x100>
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4b2c      	ldr	r3, [pc, #176]	; (8003f20 <USART_GetITStatus+0x194>)
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d00c      	beq.n	8003e8c <USART_GetITStatus+0x100>
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4b2b      	ldr	r3, [pc, #172]	; (8003f24 <USART_GetITStatus+0x198>)
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d008      	beq.n	8003e8c <USART_GetITStatus+0x100>
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <USART_GetITStatus+0x1a4>)
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d004      	beq.n	8003e8c <USART_GetITStatus+0x100>
 8003e82:	482c      	ldr	r0, [pc, #176]	; (8003f34 <USART_GetITStatus+0x1a8>)
 8003e84:	f240 5156 	movw	r1, #1366	; 0x556
 8003e88:	f7fc ff4c 	bl	8000d24 <assert_failed>
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003e8c:	887b      	ldrh	r3, [r7, #2]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	095b      	lsrs	r3, r3, #5
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8003e96:	887b      	ldrh	r3, [r7, #2]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d106      	bne.n	8003ebc <USART_GetITStatus+0x130>
  {
    itmask &= USARTx->CR1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	899b      	ldrh	r3, [r3, #12]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
 8003eba:	e00f      	b.n	8003edc <USART_GetITStatus+0x150>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d106      	bne.n	8003ed0 <USART_GetITStatus+0x144>
  {
    itmask &= USARTx->CR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8a1b      	ldrh	r3, [r3, #16]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	e005      	b.n	8003edc <USART_GetITStatus+0x150>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	8a9b      	ldrh	r3, [r3, #20]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8003edc:	887b      	ldrh	r3, [r7, #2]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <USART_GetITStatus+0x180>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <USART_GetITStatus+0x180>
  {
    bitstatus = SET;
 8003f06:	2301      	movs	r3, #1
 8003f08:	74fb      	strb	r3, [r7, #19]
 8003f0a:	e001      	b.n	8003f10 <USART_GetITStatus+0x184>
  }
  else
  {
    bitstatus = RESET;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8003f10:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40011000 	.word	0x40011000
 8003f20:	40004400 	.word	0x40004400
 8003f24:	40004800 	.word	0x40004800
 8003f28:	40004c00 	.word	0x40004c00
 8003f2c:	40005000 	.word	0x40005000
 8003f30:	40011400 	.word	0x40011400
 8003f34:	080042f8 	.word	0x080042f8

08003f38 <__libc_init_array>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	4e0f      	ldr	r6, [pc, #60]	; (8003f78 <__libc_init_array+0x40>)
 8003f3c:	4d0f      	ldr	r5, [pc, #60]	; (8003f7c <__libc_init_array+0x44>)
 8003f3e:	1b76      	subs	r6, r6, r5
 8003f40:	10b6      	asrs	r6, r6, #2
 8003f42:	d007      	beq.n	8003f54 <__libc_init_array+0x1c>
 8003f44:	3d04      	subs	r5, #4
 8003f46:	2400      	movs	r4, #0
 8003f48:	3401      	adds	r4, #1
 8003f4a:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8003f4e:	4798      	blx	r3
 8003f50:	42a6      	cmp	r6, r4
 8003f52:	d1f9      	bne.n	8003f48 <__libc_init_array+0x10>
 8003f54:	4e0a      	ldr	r6, [pc, #40]	; (8003f80 <__libc_init_array+0x48>)
 8003f56:	4d0b      	ldr	r5, [pc, #44]	; (8003f84 <__libc_init_array+0x4c>)
 8003f58:	1b76      	subs	r6, r6, r5
 8003f5a:	f000 fb13 	bl	8004584 <_init>
 8003f5e:	10b6      	asrs	r6, r6, #2
 8003f60:	d008      	beq.n	8003f74 <__libc_init_array+0x3c>
 8003f62:	3d04      	subs	r5, #4
 8003f64:	2400      	movs	r4, #0
 8003f66:	3401      	adds	r4, #1
 8003f68:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8003f6c:	4798      	blx	r3
 8003f6e:	42a6      	cmp	r6, r4
 8003f70:	d1f9      	bne.n	8003f66 <__libc_init_array+0x2e>
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
 8003f74:	bd70      	pop	{r4, r5, r6, pc}
 8003f76:	bf00      	nop
 8003f78:	0800459c 	.word	0x0800459c
 8003f7c:	0800459c 	.word	0x0800459c
 8003f80:	080045a4 	.word	0x080045a4
 8003f84:	0800459c 	.word	0x0800459c

08003f88 <memcmp>:
 8003f88:	2a03      	cmp	r2, #3
 8003f8a:	b470      	push	{r4, r5, r6}
 8003f8c:	d928      	bls.n	8003fe0 <memcmp+0x58>
 8003f8e:	ea40 0301 	orr.w	r3, r0, r1
 8003f92:	079b      	lsls	r3, r3, #30
 8003f94:	d013      	beq.n	8003fbe <memcmp+0x36>
 8003f96:	7805      	ldrb	r5, [r0, #0]
 8003f98:	780c      	ldrb	r4, [r1, #0]
 8003f9a:	42a5      	cmp	r5, r4
 8003f9c:	d124      	bne.n	8003fe8 <memcmp+0x60>
 8003f9e:	3a01      	subs	r2, #1
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e005      	b.n	8003fb0 <memcmp+0x28>
 8003fa4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003fa8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003fac:	42a5      	cmp	r5, r4
 8003fae:	d11b      	bne.n	8003fe8 <memcmp+0x60>
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	f103 0301 	add.w	r3, r3, #1
 8003fb6:	d1f5      	bne.n	8003fa4 <memcmp+0x1c>
 8003fb8:	2000      	movs	r0, #0
 8003fba:	bc70      	pop	{r4, r5, r6}
 8003fbc:	4770      	bx	lr
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	6825      	ldr	r5, [r4, #0]
 8003fc4:	681e      	ldr	r6, [r3, #0]
 8003fc6:	42ae      	cmp	r6, r5
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f104 0404 	add.w	r4, r4, #4
 8003fd0:	f103 0304 	add.w	r3, r3, #4
 8003fd4:	d104      	bne.n	8003fe0 <memcmp+0x58>
 8003fd6:	3a04      	subs	r2, #4
 8003fd8:	2a03      	cmp	r2, #3
 8003fda:	4618      	mov	r0, r3
 8003fdc:	4621      	mov	r1, r4
 8003fde:	d8f0      	bhi.n	8003fc2 <memcmp+0x3a>
 8003fe0:	2a00      	cmp	r2, #0
 8003fe2:	d1d8      	bne.n	8003f96 <memcmp+0xe>
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	e7e8      	b.n	8003fba <memcmp+0x32>
 8003fe8:	1b28      	subs	r0, r5, r4
 8003fea:	bc70      	pop	{r4, r5, r6}
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop

08003ff0 <memset>:
 8003ff0:	b4f0      	push	{r4, r5, r6, r7}
 8003ff2:	0784      	lsls	r4, r0, #30
 8003ff4:	d043      	beq.n	800407e <memset+0x8e>
 8003ff6:	1e54      	subs	r4, r2, #1
 8003ff8:	2a00      	cmp	r2, #0
 8003ffa:	d03e      	beq.n	800407a <memset+0x8a>
 8003ffc:	b2cd      	uxtb	r5, r1
 8003ffe:	4603      	mov	r3, r0
 8004000:	e003      	b.n	800400a <memset+0x1a>
 8004002:	1e62      	subs	r2, r4, #1
 8004004:	2c00      	cmp	r4, #0
 8004006:	d038      	beq.n	800407a <memset+0x8a>
 8004008:	4614      	mov	r4, r2
 800400a:	f803 5b01 	strb.w	r5, [r3], #1
 800400e:	079a      	lsls	r2, r3, #30
 8004010:	d1f7      	bne.n	8004002 <memset+0x12>
 8004012:	2c03      	cmp	r4, #3
 8004014:	d92a      	bls.n	800406c <memset+0x7c>
 8004016:	b2cd      	uxtb	r5, r1
 8004018:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800401c:	2c0f      	cmp	r4, #15
 800401e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004022:	d915      	bls.n	8004050 <memset+0x60>
 8004024:	f1a4 0710 	sub.w	r7, r4, #16
 8004028:	093f      	lsrs	r7, r7, #4
 800402a:	f103 0610 	add.w	r6, r3, #16
 800402e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8004032:	461a      	mov	r2, r3
 8004034:	6015      	str	r5, [r2, #0]
 8004036:	6055      	str	r5, [r2, #4]
 8004038:	6095      	str	r5, [r2, #8]
 800403a:	60d5      	str	r5, [r2, #12]
 800403c:	3210      	adds	r2, #16
 800403e:	42b2      	cmp	r2, r6
 8004040:	d1f8      	bne.n	8004034 <memset+0x44>
 8004042:	f004 040f 	and.w	r4, r4, #15
 8004046:	3701      	adds	r7, #1
 8004048:	2c03      	cmp	r4, #3
 800404a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 800404e:	d90d      	bls.n	800406c <memset+0x7c>
 8004050:	461e      	mov	r6, r3
 8004052:	4622      	mov	r2, r4
 8004054:	3a04      	subs	r2, #4
 8004056:	2a03      	cmp	r2, #3
 8004058:	f846 5b04 	str.w	r5, [r6], #4
 800405c:	d8fa      	bhi.n	8004054 <memset+0x64>
 800405e:	1f22      	subs	r2, r4, #4
 8004060:	f022 0203 	bic.w	r2, r2, #3
 8004064:	3204      	adds	r2, #4
 8004066:	4413      	add	r3, r2
 8004068:	f004 0403 	and.w	r4, r4, #3
 800406c:	b12c      	cbz	r4, 800407a <memset+0x8a>
 800406e:	b2c9      	uxtb	r1, r1
 8004070:	441c      	add	r4, r3
 8004072:	f803 1b01 	strb.w	r1, [r3], #1
 8004076:	42a3      	cmp	r3, r4
 8004078:	d1fb      	bne.n	8004072 <memset+0x82>
 800407a:	bcf0      	pop	{r4, r5, r6, r7}
 800407c:	4770      	bx	lr
 800407e:	4614      	mov	r4, r2
 8004080:	4603      	mov	r3, r0
 8004082:	e7c6      	b.n	8004012 <memset+0x22>

08004084 <register_fini>:
 8004084:	4b02      	ldr	r3, [pc, #8]	; (8004090 <register_fini+0xc>)
 8004086:	b113      	cbz	r3, 800408e <register_fini+0xa>
 8004088:	4802      	ldr	r0, [pc, #8]	; (8004094 <register_fini+0x10>)
 800408a:	f000 b805 	b.w	8004098 <atexit>
 800408e:	4770      	bx	lr
 8004090:	00000000 	.word	0x00000000
 8004094:	080040a5 	.word	0x080040a5

08004098 <atexit>:
 8004098:	4601      	mov	r1, r0
 800409a:	2000      	movs	r0, #0
 800409c:	4602      	mov	r2, r0
 800409e:	4603      	mov	r3, r0
 80040a0:	f000 b818 	b.w	80040d4 <__register_exitproc>

080040a4 <__libc_fini_array>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4d09      	ldr	r5, [pc, #36]	; (80040cc <__libc_fini_array+0x28>)
 80040a8:	4c09      	ldr	r4, [pc, #36]	; (80040d0 <__libc_fini_array+0x2c>)
 80040aa:	1b64      	subs	r4, r4, r5
 80040ac:	10a4      	asrs	r4, r4, #2
 80040ae:	bf18      	it	ne
 80040b0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 80040b4:	d005      	beq.n	80040c2 <__libc_fini_array+0x1e>
 80040b6:	3c01      	subs	r4, #1
 80040b8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80040bc:	4798      	blx	r3
 80040be:	2c00      	cmp	r4, #0
 80040c0:	d1f9      	bne.n	80040b6 <__libc_fini_array+0x12>
 80040c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040c6:	f000 ba63 	b.w	8004590 <_fini>
 80040ca:	bf00      	nop
 80040cc:	080045a4 	.word	0x080045a4
 80040d0:	080045a8 	.word	0x080045a8

080040d4 <__register_exitproc>:
 80040d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d6:	4c27      	ldr	r4, [pc, #156]	; (8004174 <__register_exitproc+0xa0>)
 80040d8:	6826      	ldr	r6, [r4, #0]
 80040da:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 80040de:	b085      	sub	sp, #20
 80040e0:	4607      	mov	r7, r0
 80040e2:	2c00      	cmp	r4, #0
 80040e4:	d041      	beq.n	800416a <__register_exitproc+0x96>
 80040e6:	6865      	ldr	r5, [r4, #4]
 80040e8:	2d1f      	cmp	r5, #31
 80040ea:	dd1e      	ble.n	800412a <__register_exitproc+0x56>
 80040ec:	4822      	ldr	r0, [pc, #136]	; (8004178 <__register_exitproc+0xa4>)
 80040ee:	b918      	cbnz	r0, 80040f8 <__register_exitproc+0x24>
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040f4:	b005      	add	sp, #20
 80040f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80040fc:	9103      	str	r1, [sp, #12]
 80040fe:	9202      	str	r2, [sp, #8]
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	f3af 8000 	nop.w
 8004106:	9903      	ldr	r1, [sp, #12]
 8004108:	9a02      	ldr	r2, [sp, #8]
 800410a:	9b01      	ldr	r3, [sp, #4]
 800410c:	4604      	mov	r4, r0
 800410e:	2800      	cmp	r0, #0
 8004110:	d0ee      	beq.n	80040f0 <__register_exitproc+0x1c>
 8004112:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8004116:	6025      	str	r5, [r4, #0]
 8004118:	2000      	movs	r0, #0
 800411a:	6060      	str	r0, [r4, #4]
 800411c:	4605      	mov	r5, r0
 800411e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8004122:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8004126:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 800412a:	b93f      	cbnz	r7, 800413c <__register_exitproc+0x68>
 800412c:	1cab      	adds	r3, r5, #2
 800412e:	2000      	movs	r0, #0
 8004130:	3501      	adds	r5, #1
 8004132:	6065      	str	r5, [r4, #4]
 8004134:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8004138:	b005      	add	sp, #20
 800413a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800413c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8004140:	f04f 0c01 	mov.w	ip, #1
 8004144:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8004148:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 800414c:	fa0c f205 	lsl.w	r2, ip, r5
 8004150:	4316      	orrs	r6, r2
 8004152:	2f02      	cmp	r7, #2
 8004154:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8004158:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800415c:	d1e6      	bne.n	800412c <__register_exitproc+0x58>
 800415e:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8004162:	431a      	orrs	r2, r3
 8004164:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8004168:	e7e0      	b.n	800412c <__register_exitproc+0x58>
 800416a:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 800416e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8004172:	e7b8      	b.n	80040e6 <__register_exitproc+0x12>
 8004174:	08004580 	.word	0x08004580
 8004178:	00000000 	.word	0x00000000
 800417c:	62646f6d 	.word	0x62646f6d
 8004180:	00007375 	.word	0x00007375
 8004184:	31676552 	.word	0x31676552
 8004188:	00000000 	.word	0x00000000
 800418c:	32676552 	.word	0x32676552
 8004190:	00000000 	.word	0x00000000
 8004194:	546e7442 	.word	0x546e7442
 8004198:	00747365 	.word	0x00747365
 800419c:	63656843 	.word	0x63656843
 80041a0:	6d69546b 	.word	0x6d69546b
 80041a4:	00007265 	.word	0x00007265
 80041a8:	454c4449 	.word	0x454c4449
 80041ac:	00000000 	.word	0x00000000
 80041b0:	20726d54 	.word	0x20726d54
 80041b4:	00637653 	.word	0x00637653
 80041b8:	7844454c 	.word	0x7844454c
 80041bc:	00000000 	.word	0x00000000
 80041c0:	2f707041 	.word	0x2f707041
 80041c4:	334d5453 	.word	0x334d5453
 80041c8:	2d344632 	.word	0x2d344632
 80041cc:	63736944 	.word	0x63736944
 80041d0:	7265766f 	.word	0x7265766f
 80041d4:	694c2f79 	.word	0x694c2f79
 80041d8:	72617262 	.word	0x72617262
 80041dc:	2f736569 	.word	0x2f736569
 80041e0:	334d5453 	.word	0x334d5453
 80041e4:	78344632 	.word	0x78344632
 80041e8:	74535f78 	.word	0x74535f78
 80041ec:	72655064 	.word	0x72655064
 80041f0:	5f687069 	.word	0x5f687069
 80041f4:	76697244 	.word	0x76697244
 80041f8:	732f7265 	.word	0x732f7265
 80041fc:	6d2f6372 	.word	0x6d2f6372
 8004200:	2e637369 	.word	0x2e637369
 8004204:	00000063 	.word	0x00000063
 8004208:	2f707041 	.word	0x2f707041
 800420c:	334d5453 	.word	0x334d5453
 8004210:	2d344632 	.word	0x2d344632
 8004214:	63736944 	.word	0x63736944
 8004218:	7265766f 	.word	0x7265766f
 800421c:	694c2f79 	.word	0x694c2f79
 8004220:	72617262 	.word	0x72617262
 8004224:	2f736569 	.word	0x2f736569
 8004228:	334d5453 	.word	0x334d5453
 800422c:	78344632 	.word	0x78344632
 8004230:	74535f78 	.word	0x74535f78
 8004234:	72655064 	.word	0x72655064
 8004238:	5f687069 	.word	0x5f687069
 800423c:	76697244 	.word	0x76697244
 8004240:	732f7265 	.word	0x732f7265
 8004244:	732f6372 	.word	0x732f6372
 8004248:	32336d74 	.word	0x32336d74
 800424c:	78783466 	.word	0x78783466
 8004250:	7478655f 	.word	0x7478655f
 8004254:	00632e69 	.word	0x00632e69
 8004258:	2f707041 	.word	0x2f707041
 800425c:	334d5453 	.word	0x334d5453
 8004260:	2d344632 	.word	0x2d344632
 8004264:	63736944 	.word	0x63736944
 8004268:	7265766f 	.word	0x7265766f
 800426c:	694c2f79 	.word	0x694c2f79
 8004270:	72617262 	.word	0x72617262
 8004274:	2f736569 	.word	0x2f736569
 8004278:	334d5453 	.word	0x334d5453
 800427c:	78344632 	.word	0x78344632
 8004280:	74535f78 	.word	0x74535f78
 8004284:	72655064 	.word	0x72655064
 8004288:	5f687069 	.word	0x5f687069
 800428c:	76697244 	.word	0x76697244
 8004290:	732f7265 	.word	0x732f7265
 8004294:	732f6372 	.word	0x732f6372
 8004298:	32336d74 	.word	0x32336d74
 800429c:	78783466 	.word	0x78783466
 80042a0:	6970675f 	.word	0x6970675f
 80042a4:	00632e6f 	.word	0x00632e6f
 80042a8:	2f707041 	.word	0x2f707041
 80042ac:	334d5453 	.word	0x334d5453
 80042b0:	2d344632 	.word	0x2d344632
 80042b4:	63736944 	.word	0x63736944
 80042b8:	7265766f 	.word	0x7265766f
 80042bc:	694c2f79 	.word	0x694c2f79
 80042c0:	72617262 	.word	0x72617262
 80042c4:	2f736569 	.word	0x2f736569
 80042c8:	334d5453 	.word	0x334d5453
 80042cc:	78344632 	.word	0x78344632
 80042d0:	74535f78 	.word	0x74535f78
 80042d4:	72655064 	.word	0x72655064
 80042d8:	5f687069 	.word	0x5f687069
 80042dc:	76697244 	.word	0x76697244
 80042e0:	732f7265 	.word	0x732f7265
 80042e4:	732f6372 	.word	0x732f6372
 80042e8:	32336d74 	.word	0x32336d74
 80042ec:	78783466 	.word	0x78783466
 80042f0:	6363725f 	.word	0x6363725f
 80042f4:	0000632e 	.word	0x0000632e
 80042f8:	2f707041 	.word	0x2f707041
 80042fc:	334d5453 	.word	0x334d5453
 8004300:	2d344632 	.word	0x2d344632
 8004304:	63736944 	.word	0x63736944
 8004308:	7265766f 	.word	0x7265766f
 800430c:	694c2f79 	.word	0x694c2f79
 8004310:	72617262 	.word	0x72617262
 8004314:	2f736569 	.word	0x2f736569
 8004318:	334d5453 	.word	0x334d5453
 800431c:	78344632 	.word	0x78344632
 8004320:	74535f78 	.word	0x74535f78
 8004324:	72655064 	.word	0x72655064
 8004328:	5f687069 	.word	0x5f687069
 800432c:	76697244 	.word	0x76697244
 8004330:	732f7265 	.word	0x732f7265
 8004334:	732f6372 	.word	0x732f6372
 8004338:	32336d74 	.word	0x32336d74
 800433c:	78783466 	.word	0x78783466
 8004340:	6173755f 	.word	0x6173755f
 8004344:	632e7472 	.word	0x632e7472
 8004348:	00000000 	.word	0x00000000

0800434c <table_crc_hi>:
 800434c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 800435c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800436c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800437c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 800438c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800439c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80043ac:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80043bc:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 80043cc:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 80043dc:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80043ec:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 80043fc:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800440c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@
 800441c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800442c:	4180c001 4081c100 4081c100 4180c001     ...A...@...@...A
 800443c:	4081c100 4180c001 4180c001 4081c100     ...@...A...A...@

0800444c <table_crc_lo>:
 800444c:	01c1c000 c20203c3 c70706c6 04c4c505     ................
 800445c:	cd0d0ccc 0ececf0f 0bcbca0a c80809c9     ................
 800446c:	d91918d8 1adadb1b 1fdfde1e dc1c1ddd     ................
 800447c:	15d5d414 d61617d7 d31312d2 10d0d111     ................
 800448c:	f13130f0 32f2f333 37f7f636 f43435f5     .01.3..26..7.54.
 800449c:	3dfdfc3c fe3e3fff fb3b3afa 38f8f939     <..=.?>..:;.9..8
 80044ac:	29e9e828 ea2a2beb ef2f2eee 2ceced2d     (..).+*.../.-..,
 80044bc:	e52524e4 26e6e727 23e3e222 e02021e1     .$%.'..&"..#.! .
 80044cc:	a16160a0 62a2a363 67a7a666 a46465a5     .`a.c..bf..g.ed.
 80044dc:	6dadac6c ae6e6faf ab6b6aaa 68a8a969     l..m.on..jk.i..h
 80044ec:	79b9b878 ba7a7bbb bf7f7ebe 7cbcbd7d     x..y.{z..~..}..|
 80044fc:	b57574b4 76b6b777 73b3b272 b07071b1     .tu.w..vr..s.qp.
 800450c:	51919050 92525393 97575696 54949555     P..Q.SR..VW.U..T
 800451c:	9d5d5c9c 5e9e9f5f 5b9b9a5a 98585999     .\]._..^Z..[.YX.
 800452c:	89494888 4a8a8b4b 4f8f8e4e 8c4c4d8d     .HI.K..JN..O.ML.
 800453c:	45858444 86464787 83434282 40808141     D..E.GF..BC.A..@

0800454c <xLEDs>:
 800454c:	03020001                                ....

08004550 <ucExpectedStackBytes.8478>:
 8004550:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
 8004560:	a5a5a5a5                                ....

08004564 <GPIO_PIN>:
 8004564:	20001000 80004000                       ... .@..

0800456c <GPIO_CLK>:
 800456c:	00000008 00000008 00000008 00000008     ................
 800457c:	00000043                                C...

08004580 <_global_impure_ptr>:
 8004580:	20000030                                0.. 

08004584 <_init>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr

08004590 <_fini>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	bf00      	nop
 8004594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004596:	bc08      	pop	{r3}
 8004598:	469e      	mov	lr, r3
 800459a:	4770      	bx	lr
